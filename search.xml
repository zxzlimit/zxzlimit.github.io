<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>常用在线工具与资源汇总</title>
    <url>/2025/10/18/%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/%E7%BD%91%E7%AB%99/%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h2 id="1、用于病毒检测的网站"><a href="#1、用于病毒检测的网站" class="headerlink" title="1、用于病毒检测的网站"></a>1、<strong>用于病毒检测的网站</strong></h2><p><a href="https://www.virustotal.com/gui/home/upload">https://www.virustotal.com/gui/home/upload</a></p>
<h2 id="2、用于ip对应的实际地理位置的查询"><a href="#2、用于ip对应的实际地理位置的查询" class="headerlink" title="2、用于ip对应的实际地理位置的查询"></a>2、<strong>用于ip对应的实际地理位置的查询</strong></h2><p><a href="https://www.chaipip.com/">https://www.chaipip.com/</a></p>
<p><a href="https://toolwa.com/ip/">https://toolwa.com/ip/</a></p>
<h2 id="3、极简机场网址"><a href="#3、极简机场网址" class="headerlink" title="3、极简机场网址"></a>3、<strong>极简机场网址</strong></h2><p><a href="https://www.wogg.life/user#">https://www.wogg.life/user#</a></p>
<h2 id="4、以图搜寻"><a href="#4、以图搜寻" class="headerlink" title="4、以图搜寻"></a>4、<strong>以图搜寻</strong></h2><p><a href="https://xslist.org/zh/searchByImage">https://xslist.org/zh/searchByImage</a></p>
<h2 id="5、正则表达式测试网站"><a href="#5、正则表达式测试网站" class="headerlink" title="5、正则表达式测试网站"></a>5、<strong>正则表达式测试网站</strong></h2><p><a href="https://www.jyshare.com/front-end/854/">https://www.jyshare.com/front-end/854/</a></p>
<h2 id="6、json数据规则化方便阅读"><a href="#6、json数据规则化方便阅读" class="headerlink" title="6、json数据规则化方便阅读"></a>6、<strong>json数据规则化方便阅读</strong></h2><p><a href="https://www.json.cn/">https://www.json.cn/</a></p>
<p><a href="https://jsonlint.com/">https://jsonlint.com/</a></p>
<h2 id="7、base64编解码"><a href="#7、base64编解码" class="headerlink" title="7、base64编解码"></a>7、<strong>base64编解码</strong></h2><p><a href="https://www.base64decode.org/">https://www.base64decode.org/</a></p>
<h2 id="8、md5编码的破解"><a href="#8、md5编码的破解" class="headerlink" title="8、md5编码的破解"></a>8、<strong>md5编码的破解</strong></h2><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a></p>
<p><a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a></p>
<h2 id="9、ai检测助手，检测是否为ai生成（包含文字，图片，视频）"><a href="#9、ai检测助手，检测是否为ai生成（包含文字，图片，视频）" class="headerlink" title="9、ai检测助手，检测是否为ai生成（包含文字，图片，视频）"></a>9、<strong>ai检测助手，检测是否为ai生成（包含文字，图片，视频）</strong></h2><p><a href="https://matrix.tencent.com/ai-detect/">https://matrix.tencent.com/ai-detect/</a></p>
<h2 id="10、将-curl-命令转换成多种编程语言中的网络请求代码，实现快速得到api"><a href="#10、将-curl-命令转换成多种编程语言中的网络请求代码，实现快速得到api" class="headerlink" title="10、将 curl 命令转换成多种编程语言中的网络请求代码，实现快速得到api"></a>10、<strong>将 <code>curl</code> 命令转换成多种编程语言中的网络请求代码，实现快速得到api</strong></h2><p><a href="https://curlconverter.com/">https://curlconverter.com/</a></p>
<h2 id="11、文字，代码，文件差异对比"><a href="#11、文字，代码，文件差异对比" class="headerlink" title="11、文字，代码，文件差异对比"></a>11、<strong>文字，代码，文件差异对比</strong></h2><p><a href="https://www.diffchecker.com/">https://www.diffchecker.com/</a></p>
<h2 id="12、在线语音转文字"><a href="#12、在线语音转文字" class="headerlink" title="12、在线语音转文字"></a>12、<strong>在线语音转文字</strong></h2><p><a href="https://otter.ai/">https://otter.ai/</a></p>
<h2 id="13、泰坦机场"><a href="#13、泰坦机场" class="headerlink" title="13、泰坦机场"></a>13、泰坦机场</h2><p><a href="https://jpcdn.taishan2025.icu/">https://jpcdn.taishan2025.icu/</a>  (不需要梯子)</p>
<p><a href="https://jpcdn.taishan2025.icu/login?redirect=order">https://jpcdn.taishan2025.icu/login?redirect=order</a></p>
<h2 id="14、cloudflare"><a href="#14、cloudflare" class="headerlink" title="14、cloudflare"></a>14、cloudflare</h2><p><a href="https://dash.cloudflare.com/login">https://dash.cloudflare.com/login</a></p>
<h2 id="15、环球巴士"><a href="#15、环球巴士" class="headerlink" title="15、环球巴士"></a>15、环球巴士</h2><p><a href="https://universalbus.cn/">https://universalbus.cn/</a></p>
<h2 id="16、银河录像局"><a href="#16、银河录像局" class="headerlink" title="16、银河录像局"></a>16、银河录像局</h2><p><a href="https://nf.video/">https://nf.video/</a></p>
]]></content>
      <categories>
        <category>常用速查</category>
        <category>网站</category>
      </categories>
      <tags>
        <tag>在线工具</tag>
        <tag>安全</tag>
        <tag>开发辅助</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker命令大全</title>
    <url>/2025/08/05/%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/%E5%91%BD%E4%BB%A4/Docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p>流程</p>
<p>一般的流程是先拉取一个镜像，就是一个环境image，注意，我们最终是要一个容器的，也就是container，然后</p>
<p>docker run -d –name myredis -p 6379:6379 redis就可以产生容器了</p>
<p>-d是后台运行</p>
<p>-p是端口映射，-p &lt;宿主机端口&gt;:&lt;容器端口&gt;</p>
<p>-v是数据持久化，将docker当中的容器的数据保持在本地电脑的某一文件下</p>
<p>查看docker的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>



<p>进入容器的终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id或容器名称 sh</span><br></pre></td></tr></table></figure>



<p>查看容器的ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect &lt;container_name_or_id&gt; | grep &quot;IPAddress&quot;</span><br></pre></td></tr></table></figure>



<p>启动容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start &lt;container_id_or_name&gt;</span><br></pre></td></tr></table></figure>



<p>停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop &lt;container_id_or_name&gt;</span><br></pre></td></tr></table></figure>



<p>重启容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart &lt;container_id_or_name&gt;</span><br></pre></td></tr></table></figure>



<p>删除容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm &lt;container_id_or_name&gt;</span><br></pre></td></tr></table></figure>



<p>常见的容器的启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name &lt;container_name&gt; -v &lt;宿主机路径&gt;:&lt;容器路径&gt; &lt;image_name&gt;</span><br></pre></td></tr></table></figure>



<p>数据卷的挂载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume create my_volume</span><br><span class="line">docker run -d --name myredis -p 6379:6379 -v my_volume:/data redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure>



<p>设置一个mysql的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=238545 -p 3306:3306 mysql</span><br></pre></td></tr></table></figure>



<p>部署docker项目</p>
<p>每一个docker基本都是这样的，一般是会有一个docker-compose.yaml的配置文件的，在配置文件里面配置好相关东西，然后传到服务器上面，建立一个文件夹专门放置这个docker项目，然后运行下面代码启动这个docker项目，-d是后台运行的。拉取时候可能报错的，服务器挂梯子就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>常用速查</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 命令大全</title>
    <url>/2025/08/06/%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/%E5%91%BD%E4%BB%A4/Git%20%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h2 id="一、基础信息配置"><a href="#一、基础信息配置" class="headerlink" title="一、基础信息配置"></a>一、基础信息配置</h2><p>配置用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;zz&quot;</span><br><span class="line">git config --global user.email 17353190891@163.com</span><br></pre></td></tr></table></figure>

<p>对上面信息进行保存，不用每次都输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>

<p>查看配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>



<h2 id="二、本地和远程仓库的基础配置"><a href="#二、本地和远程仓库的基础配置" class="headerlink" title="二、本地和远程仓库的基础配置"></a>二、本地和远程仓库的基础配置</h2><h3 id="1、初始化本地并关联仓库"><a href="#1、初始化本地并关联仓库" class="headerlink" title="1、初始化本地并关联仓库"></a>1、初始化本地并关联仓库</h3><p>新建一个仓库，和本地关联起来，实现直接推送和拉取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;# dasd&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:zxzlimit/dasd.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<p>创建一个git项目后会有上面这些代码，然后就是回到电脑本地，cd到要推送的文件夹里面依次执行就可以了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">详细分析一下</span><br><span class="line"></span><br><span class="line">echo &quot;# dasd&quot; &gt;&gt; README.md</span><br><span class="line"># 使用 echo 命令将字符串 &quot;# dasd&quot; 追加到 README.md 文件中。</span><br><span class="line"># 如果 README.md 文件不存在，此命令会创建该文件。</span><br><span class="line"># &quot;&gt;&gt;&quot; 表示追加模式，不会覆盖文件原有内容。</span><br><span class="line"># &quot;# dasd&quot; 通常是 Markdown 文件的标题（一级标题），这里可能是项目的名称或描述。</span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line"># 初始化一个新的 Git 仓库。</span><br><span class="line"># 在当前目录下创建 .git 子目录，存储版本控制的元数据。</span><br><span class="line"># 这是开始使用 Git 进行版本管理的第一步。</span><br><span class="line"></span><br><span class="line">git add README.md</span><br><span class="line"># 将 README.md 文件添加到 Git 的暂存区（staging area）。</span><br><span class="line"># 暂存区是准备提交的文件集合，此命令告诉 Git 跟踪 README.md 文件的更改。</span><br><span class="line"></span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"># 创建一个新的提交（commit），将暂存区中的更改（即 README.md 文件）保存到 Git 仓库。</span><br><span class="line"># -m 选项允许添加提交信息（message），这里的信息是 &quot;first commit&quot;，描述此次提交的内容。</span><br><span class="line"># 提交后，Git 会记录文件的当前状态，形成版本历史。</span><br><span class="line"></span><br><span class="line">git branch -M main</span><br><span class="line"># 重命名当前分支为 &quot;main&quot;。</span><br><span class="line"># -M 是 --move --force 的缩写，表示强制将当前分支（通常是默认的 master 分支）重命名为 main。</span><br><span class="line"># 这是为了遵循现代 Git 仓库的命名惯例（main 替代 master）。</span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:zxzlimit/dasd.git</span><br><span class="line"># 添加一个远程仓库，命名为 origin。</span><br><span class="line"># 远程仓库的地址是 git@github.com:zxzlimit/dasd.git，这是一个 SSH 格式的 GitHub 仓库地址。</span><br><span class="line"># 此命令将本地仓库与 GitHub 上的远程仓库关联起来，方便后续推送代码。</span><br><span class="line"></span><br><span class="line">git push -u origin main</span><br><span class="line"># 将本地的 main 分支推送到远程仓库 origin 的 main 分支。</span><br><span class="line"># -u 或 --set-upstream 选项设置 origin main 为本地 main 分支的上游分支。</span><br><span class="line"># 第一次推送加一个-u，后面就可以直接git push来推送了，不然还得git push origin mian来推送</span><br></pre></td></tr></table></figure>

<h3 id="2、初始化后推送"><a href="#2、初始化后推送" class="headerlink" title="2、初始化后推送"></a>2、初始化后推送</h3><p>依次执行后就可以了，以后要推送至仓库执行下面代码，还是先cd到相应文件夹下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;备注内容&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h3 id="3、初始化后拉取"><a href="#3、初始化后拉取" class="headerlink" title="3、初始化后拉取"></a>3、初始化后拉取</h3><p>拉取远程最新仓库的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>



<h2 id="三、本地分支推送"><a href="#三、本地分支推送" class="headerlink" title="三、本地分支推送"></a>三、本地分支推送</h2><p>例如将本地main分支推送至仓库的dev分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin main:dev	#main:dev：把本地的 main 分支内容推送到远程的 dev 分支上。</span><br></pre></td></tr></table></figure>



<h2 id="四、强制推送"><a href="#四、强制推送" class="headerlink" title="四、强制推送"></a>四、强制推送</h2><p>如远程仓库已经有项目了，我想将本地的直接覆盖远程的，还是先cd到本地文件夹下，然后使用以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m “备注”</span><br><span class="line">git push --set-u git@gitee.com:zxzlimit/all.git master --force	强制推送</span><br></pre></td></tr></table></figure>

<p>解释一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-u 是保存追踪，第一次推送加一个-u，后面就可以直接git push来推送了，不然还得git push origin mian来推送</span><br><span class="line"></span><br><span class="line">master 表示推送本地的 master 分支到远程仓库的 master 分支。如果想将本地的dev推送到远程的master，改为dev:master</span><br></pre></td></tr></table></figure>



<h2 id="五、git-clone"><a href="#五、git-clone" class="headerlink" title="五、git clone"></a>五、git clone</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone 仓库地址</span><br></pre></td></tr></table></figure>

<p>clone好后以后直接也是git push 和git pull了</p>
<h2 id="六、分支及分支推送"><a href="#六、分支及分支推送" class="headerlink" title="六、分支及分支推送"></a>六、分支及分支推送</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch  					查看本地所有分支。</span><br><span class="line">git branch [branch-name]  		创建新分支。</span><br><span class="line">git checkout [branch-name]		切换到指定分支。</span><br><span class="line">git branch -d dev 				删除dev分支，删除之前记得查看自己所在的分支</span><br></pre></td></tr></table></figure>

<p>分支推送，前提还是先和远程关联好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin main:dev 		你本地的 main 分支 推送到远程的 dev 分支。</span><br></pre></td></tr></table></figure>



<h2 id="七、本地回滚"><a href="#七、本地回滚" class="headerlink" title="七、本地回滚"></a>七、本地回滚</h2><p>查看状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>需求：就是我现在已经commit过了，有多个commit的信息，现在我想回滚到之前某一个commit当中还是保留所有commit的信息，不删除任何一个。例如我有三次提交，备注分别为1,2，最后一次提交。</p>
<p>查看版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250806164158384.png" alt="image-20250806162005796"></p>
<p>输入下面命令会跳出如下图所示的窗口，这是个vim编辑器的，直接wq保存退出就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert e87d545771e979ebb095ecb5393926d31c99dafa</span><br></pre></td></tr></table></figure>

<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250806164158315.png" alt="image-20250806161740361"></p>
<p>然后在输入git log会出现下面信息</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250806164158372.png" alt="image-20250806161933948"></p>
<p>现在已经回退了，其他操作类似的。</p>
<h2 id="八、取消远程关联"><a href="#八、取消远程关联" class="headerlink" title="八、取消远程关联"></a>八、取消远程关联</h2><p>即取消第一步和第五步建立起来的本地和远程的关联</p>
<p>1、查看远程管理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">会输出类似于</span><br><span class="line">origin  https://github.com/xxx/your-repo.git (fetch)</span><br><span class="line">origin  https://github.com/xxx/your-repo.git (push)</span><br></pre></td></tr></table></figure>

<p>2、删除关联</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>



<h2 id="九、sourcetree常用"><a href="#九、sourcetree常用" class="headerlink" title="九、sourcetree常用"></a>九、sourcetree常用</h2><p>强制拉取远端仓库,若报错则执行一下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br><span class="line">git pull origin main</span><br></pre></td></tr></table></figure>



<h2 id="十、将本地推送强制推送到远程仓库"><a href="#十、将本地推送强制推送到远程仓库" class="headerlink" title="十、将本地推送强制推送到远程仓库"></a>十、将本地推送强制推送到远程仓库</h2><p>1、解绑当前远程 origin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>

<p>2、再次查看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>3、在连接新的远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:zxzlimit/new-project.git</span><br></pre></td></tr></table></figure>

<p>在执行,应该会看到一下东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p><img src="https://zxzmac.oss-cn-beijing.aliyuncs.com/image-20251022215401058.png" alt="image-20251022215401058"></p>
<p>4、如果本地分支是 master，远程是 main,使用一下指令改一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -M main   # 重命名本地分支为 main</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5、然后就是强制推送了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin main --force</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>常用速查</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux指令大全</title>
    <url>/2025/04/21/%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/%E5%91%BD%E4%BB%A4/Linux%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h2 id="1、文件与目录"><a href="#1、文件与目录" class="headerlink" title="1、文件与目录"></a>1、文件与目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls        # 简单列出</span><br><span class="line">ls -l     # 以列表方式展示</span><br><span class="line">ls -a     # 显示隐藏文件</span><br><span class="line"></span><br><span class="line">cd /path/to/dir     # 进入目标目录</span><br><span class="line">cd ..               # 返回上一级目录</span><br><span class="line">cd ~                # 回到用户主目录</span><br><span class="line"></span><br><span class="line">mv			#移动或重命名	mv old new</span><br><span class="line">rm -rf 		#删除文件/目录</span><br><span class="line"></span><br><span class="line">touch file.txt      # 创建空文件</span><br><span class="line">mkdir mydir         # 创建文件夹</span><br></pre></td></tr></table></figure>



<h2 id="2、文件查看-搜索"><a href="#2、文件查看-搜索" class="headerlink" title="2、文件查看 &amp; 搜索"></a>2、文件查看 &amp; 搜索</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat file.txt        # 一次性查看全部内容</span><br><span class="line"></span><br><span class="line">find /path -name filename         # 按名称查找</span><br><span class="line">find . -type f -name &quot;*.log&quot;      # 查找当前目录下所有 .log 文件</span><br><span class="line"></span><br><span class="line">grep &quot;关键字&quot; file.txt</span><br></pre></td></tr></table></figure>



<h2 id="3、用户与权限"><a href="#3、用户与权限" class="headerlink" title="3、用户与权限"></a>3、用户与权限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami		#当前用户</span><br><span class="line">chmod +x file.sh           # 给予执行权限</span><br></pre></td></tr></table></figure>



<h2 id="4、压缩与解压"><a href="#4、压缩与解压" class="headerlink" title="4、压缩与解压"></a>4、压缩与解压</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -czvf archive.tar.gz folder/	# 打包压缩</span><br><span class="line">tar -xzvf archive.tar.gz		# 解压</span><br><span class="line">zip 压缩后的名字.zip</span><br><span class="line">unzip 压缩包.zip</span><br></pre></td></tr></table></figure>



<h2 id="5、系统信息"><a href="#5、系统信息" class="headerlink" title="5、系统信息"></a>5、系统信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -h        # 查看磁盘空间</span><br><span class="line">top 		 #查看系统资源</span><br><span class="line">du -sh			#查看文件夹大小</span><br><span class="line">free -h			#查看内存	</span><br><span class="line">uptime			#查看运行时间</span><br></pre></td></tr></table></figure>



<h2 id="6、系统管理"><a href="#6、系统管理" class="headerlink" title="6、系统管理"></a>6、系统管理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update/upgrade				#更新软件</span><br><span class="line">reboot		#重启</span><br></pre></td></tr></table></figure>



<h2 id="7、根据域名获取ip"><a href="#7、根据域名获取ip" class="headerlink" title="7、根据域名获取ip"></a>7、根据域名获取ip</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nslookup xc104.zjxc.gov.cn</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zxz@r9000p:~$ nslookup xc104.zjxc.gov.cn</span><br><span class="line">Server:         10.255.255.254</span><br><span class="line">Address:        10.255.255.254#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   xc104.zjxc.gov.cn</span><br><span class="line">Address: 220.191.226.152</span><br></pre></td></tr></table></figure>

<p>结果ip为220.191.226.152</p>
<h2 id="8、获取进程"><a href="#8、获取进程" class="headerlink" title="8、获取进程"></a>8、获取进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取所有的进程</span><br><span class="line">ps aux</span><br><span class="line"></span><br><span class="line">获取特定的进程</span><br><span class="line">ps aux | grep python</span><br></pre></td></tr></table></figure>



<h2 id="9、获取所有进行的端口"><a href="#9、获取所有进行的端口" class="headerlink" title="9、获取所有进行的端口"></a>9、获取所有进行的端口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ss -tulnp</span><br></pre></td></tr></table></figure>



<h2 id="10、杀死端口或进程"><a href="#10、杀死端口或进程" class="headerlink" title="10、杀死端口或进程"></a>10、杀死端口或进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure>



<h2 id="11、获取系统架构"><a href="#11、获取系统架构" class="headerlink" title="11、获取系统架构"></a>11、获取系统架构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -m</span><br></pre></td></tr></table></figure>



<h2 id="12、检查端口是否被占用"><a href="#12、检查端口是否被占用" class="headerlink" title="12、检查端口是否被占用"></a>12、检查端口是否被占用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -i:80          # 查看占用 80 端口的进程</span><br></pre></td></tr></table></figure>



<h2 id="13、安装sh文件"><a href="#13、安装sh文件" class="headerlink" title="13、安装sh文件"></a>13、安装sh文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sido sh your_script.sh</span><br></pre></td></tr></table></figure>



<h2 id="14、查看自己ip"><a href="#14、查看自己ip" class="headerlink" title="14、查看自己ip"></a>14、查看自己ip</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig		查看自己ip</span><br><span class="line"></span><br><span class="line">curl ifconfig.me			查看自己的公网ip</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>常用速查</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL命令大全</title>
    <url>/2025/08/05/%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/%E5%91%BD%E4%BB%A4/MySQL%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><p>常用的DDL（Data Definition Language）命令用于数据库的结构定义，包括创建、修改和删除数据库对象。以下是一些常用的DDL命令及其示例：</p>
<ul>
<li>创建数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP DATABASE 数据库名称;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建表格</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名 (</span><br><span class="line">    头名 数据类型,</span><br><span class="line">    头名 数据类型,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改表格结构</p>
<p>添加新列</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">ADD 头名 数据类型;</span><br></pre></td></tr></table></figure>

<p>​	删除某列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">DROP 头名 数据类型;</span><br></pre></td></tr></table></figure>

<p>   修改列的数据类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名</span><br><span class="line">MODIFY 头名 new_datatype;</span><br></pre></td></tr></table></figure>

<p>​	修改列名同时数据类型也能改变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name</span><br><span class="line">CHANGE 老头名 新头名 数据类型;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>删除表格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE 表名;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h1><p>插入数据（增）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 (头名1, 头名2, ...) VALUES (值1, 值2, ...);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO 表名 VALUES (值1, 值2, ...);	所有头名按顺序</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO users (id, name, email) VALUES</span><br><span class="line">(1, &#x27;John Doe&#x27;, &#x27;john@example.com&#x27;),</span><br><span class="line">(2, &#x27;Jane Doe&#x27;, &#x27;jane@example.com&#x27;),</span><br><span class="line">(3, &#x27;Bob Smith&#x27;, &#x27;bob@example.com&#x27;);		插入多组数据</span><br></pre></td></tr></table></figure>

<p>删除数据（删）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM table_name;	这将删除名为 table_name 的表中的所有行，但保留表结构不变。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM users WHERE id = 5; 这将删除 users 表中 id 为 5 的行。</span><br></pre></td></tr></table></figure>

<p>数据更新（改）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE users SET age = age + 1; users 表中所有用户的 age 字段值都加 1。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE users SET age = 30 WHERE name = &#x27;John&#x27;;  users 表中 name 为 &quot;John&quot; 的用户的 age 更新为 30 岁。</span><br></pre></td></tr></table></figure>



<h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><p>数据查询（查）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ... FROM table_name WHERE condition;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM table_name WHERE condition;</span><br></pre></td></tr></table></figure>





<h1 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h1><p>创建用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREAT USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED BY &#x27;密码&#x27;；</span><br><span class="line">例：CREAT USER &#x27;text&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;；</span><br><span class="line">创建一个text用户，可以在任意ip主机访问数据库，密码为123456</span><br></pre></td></tr></table></figure>

<p>修改密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; IDENTIFIED WITH MYSQL_NATIVE_PASSWORD BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>

<p>删除用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br></pre></td></tr></table></figure>

<p>显示权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR &#x27;用户名&#x27;@&#x27;主机名&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="D:\screenshot\Screenshots\2023-12\chrome_9ARzSgJpGP.png" alt="chrome_9ARzSgJpGP"></p>
<p>赋予权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANK 权限名称，权限名称.... ON 数据库名.表明 TO &#x27;用户&#x27;@&#x27;主机名&#x27;；</span><br><span class="line">数据库下的所有表可以用*.*来表示</span><br><span class="line">GRANT ALL ON MYSQL.TO &#x27;test&#x27;@&#x27;%&#x27;;</span><br><span class="line">GRANT ALL ON *.* TO &#x27;test&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<p>撤销权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;用户名&#x27;@&#x27;主机名&#x27;；</span><br><span class="line">REVOKE SELECT ON *.* FROM &#x27;test&#x27;e&#x27;%&#x27;；</span><br></pre></td></tr></table></figure>



<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>每个表都最好加一个id</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE your_table_name (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    -- Other columns</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>常用速查</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2025/02/17/%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/%E5%91%BD%E4%BB%A4/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>用于匹配特定的字符，其实就是搜索出自己想的字符串内容啦。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>. 匹配换行符外的任意字符</p>
<p>\w 匹配字母、数字、下划线、汉字     \W 匹配非字母、数字、下划线、汉字<br>\s 匹配任意空白符                                   \S 匹配除单个字符外的所有字符（包括tal和换行符）<br>\d 匹配数字                                              \D 匹配非数字<br>\b 匹配单词边界<br>() 分组<br>^ 匹配字符串开始                     $匹配字符串结束<br>\A 匹配字符串开始                   \Z匹配字符串结束</p>
<p>？0次或多次</p>
<p>+1次或多次</p>
<p>*0次或多次</p>
<p>{n} n次<br>{n，}  最少n次<br>{n，m}  n次到m次</p>
<p>|  表示或</p>
<p>转义 \</p>
<p>[^ ]   排除匹配</p>
<hr>
<p>贪婪匹配    .*<br>非贪婪匹配    .*?</p>
<hr>
<p>匹配汉字  [\u4e00-\u9fa5]<br>匹配英文字母    [a-zA-Z]   含大小写<br>匹配英文字母和数字组合    [a-zA-Z0-9]</p>
<h2 id="python中的正则表达式"><a href="#python中的正则表达式" class="headerlink" title="python中的正则表达式"></a>python中的正则表达式</h2><ul>
<li>findall</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">#正则</span><br><span class="line">pattern = r&quot;https://.*?.com&quot;</span><br><span class="line"></span><br><span class="line">#str字符串</span><br><span class="line">txt = &quot;https://www.baidu.com/ sdfsdfsdfdsfsdfsdf sdfdsf https://www.bilibili.com/&quot;</span><br><span class="line"></span><br><span class="line">#匹配</span><br><span class="line">match = re.findall(pattern, txt)</span><br><span class="line"></span><br><span class="line">#打印</span><br><span class="line">print(match)</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">[&#x27;https://www.baidu.com&#x27;, &#x27;https://www.bilibili.com&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li>search和group</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line"># 要匹配的字符串</span><br><span class="line">input_string = &quot;17353190891&quot;</span><br><span class="line"></span><br><span class="line"># 定义正则表达式模式，匹配11位数字，并提取第4位到第8位的数字</span><br><span class="line">pattern = r&quot;\d&#123;3&#125;(\d&#123;5&#125;)\d&#123;3&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 使用re.search()函数进行匹配</span><br><span class="line">match = re.search(pattern, string)</span><br><span class="line"></span><br><span class="line"># 如果匹配成功</span><br><span class="line">if match:</span><br><span class="line">    # 提取第4位到第8位的数字</span><br><span class="line">    extracted_digits = match.group(1)   #第一个()的内容</span><br><span class="line">    print(&quot;提取的数字：&quot;, extracted_digits)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;没有找到匹配的数字&quot;)</span><br><span class="line">    </span><br><span class="line">结果</span><br><span class="line">提取的数字： 53190</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>常用速查</category>
        <category>命令</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>AI 日志与开发流程提示</title>
    <url>/2025/10/18/%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/%E8%AE%BE%E7%BD%AE/AI%20%E6%97%A5%E5%BF%97%E4%B8%8E%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>ai开发的一些坑</p>
<p>对于ai大模型来说，确实好用。但是有一些我遇到的坑要防止以后重新踩了，每一次ai更改代码要进行git备份一下，而且让ai写出改了哪些地方，生成一个专门的文件，里面分点写出被更改文件的相对路径，以及更前后的对比存档。这样能让人方便快速的进行迭代内容查看和汇总。这里总结一个模板,然后在加入下面这段话.</p>
<p>“每次根据我的需求修改代码后，请先在临时分支提交改动（Commit message: ‘AI 临时修改’），然后询问我确认：当我严格输入 pase 时，生成完整 Markdown AIlog（包含改动文件列表、前后对比、摘要和迭代总结），文件命名规范为 ai_log_YYYYMMDD__vX_.md，存放在 ai_log 文件夹，如不存在则自动新建，并合并改动到主分支提交（Commit message: ‘AI 修改采纳，生成 AIlog: ai_log_YYYYMMDD__vX_.md’）；当我严格输入 reject 时，回滚临时分支并清除上一次上下文；任何其他输入不做操作，等待我下一次指令。”</p>
<p>附件下载：<a style="color: #007bff;" href="/download/ai_log_template.md" download>ai_log_template.md</a></p>
]]></content>
      <categories>
        <category>常用速查</category>
        <category>设置</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>AI</tag>
        <tag>开发规范</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorm 与 IntelliJ IDEA 配置</title>
    <url>/2025/10/04/%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/%E8%AE%BE%E7%BD%AE/webstorm%E5%92%8Cintellij%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="webstorm和intellij的一些设置"><a href="#webstorm和intellij的一些设置" class="headerlink" title="webstorm和intellij的一些设置"></a>webstorm和intellij的一些设置</h1><h2 id="1、代码折叠快捷键"><a href="#1、代码折叠快捷键" class="headerlink" title="1、代码折叠快捷键"></a>1、代码折叠快捷键</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win：</span><br><span class="line"></span><br><span class="line">ctrl+shift+-折叠</span><br><span class="line"></span><br><span class="line">ctrl+shift++展开</span><br></pre></td></tr></table></figure>

<h2 id="2、取消粘贴行"><a href="#2、取消粘贴行" class="headerlink" title="2、取消粘贴行"></a>2、取消粘贴行</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250928100844349.png" alt="image-20250928100844271"></p>
<p>右键，粘贴行设置，取消就行了，或者在设置当中找，一样的</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250928105729381.png" alt="image-20250928105729290"></p>
<h2 id="3、字体大小的设置"><a href="#3、字体大小的设置" class="headerlink" title="3、字体大小的设置"></a>3、字体大小的设置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win：</span><br><span class="line"></span><br><span class="line">alt+shift+&gt;	放大</span><br><span class="line"></span><br><span class="line">alt+shift+&lt;	缩小</span><br><span class="line"></span><br><span class="line">mac：</span><br><span class="line"></span><br><span class="line">ctrl+shift+&gt; 放大</span><br><span class="line"></span><br><span class="line">ctrl+shift+&lt; 缩小</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4、整体界面缩放"><a href="#4、整体界面缩放" class="headerlink" title="4、整体界面缩放"></a>4、整体界面缩放</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win:</span><br><span class="line"></span><br><span class="line">alt+shift++		放大</span><br><span class="line"></span><br><span class="line">alt+shift+-		缩小</span><br><span class="line"></span><br><span class="line">mac:</span><br><span class="line"></span><br><span class="line">ctrl+option+=	放大</span><br><span class="line"></span><br><span class="line">ctrl+option+-	缩小</span><br></pre></td></tr></table></figure>

<h2 id="5、取消白线"><a href="#5、取消白线" class="headerlink" title="5、取消白线"></a>5、取消白线</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250928102329639.png" alt="image-20250928102329535"></p>
<p>把这个取消就行了</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250928102831051.png" alt="image-20250928102830869"></p>
]]></content>
      <categories>
        <category>常用速查</category>
        <category>设置</category>
      </categories>
      <tags>
        <tag>WebStorm</tag>
        <tag>IntelliJ</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>2025.09.15</title>
    <url>/2025/09/15/%E6%97%A5%E8%AE%B0/2025.09/2025.09.15/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b8f6e202fa9e47abafe43ada35bd443b7a19e990d0eb2bac66419a0ddc60563b">1bd3bd312516a9a209976099ef49f4794d1f7cf394c7b16094ea09ff4648e186574b352f73066642a481191061357954fcef3292470aef30d588b90451f6d9f540b9fbdbd21198baec45de02ca51fde3e4b16d8f0241129f23159697d840c35d5c9583ce2205888556184b890449077eac2914a54021643ebd3bdf007bfe3f4e70b7609c25960a27cb01e6e107b88dd60a78186452b63f7038f49e4a7e5356878096c33e147229c09dc5fff00dd3129dfa259fb2302bb42c71890df8c1efe24f5da50d8adf6e37b8e2f51da6d106743dde44a5f2a18d468b445c9a85558ce9f5ac7441a063f40a61b006e903ec74d45c3bdeb12eaf7f0c3dc2001366e1b9a1d477bf79acafef1b343bc596ae924dd68d5b1293617071e4f87ebd5ecc4205d18dfdca35ec5ae11625e6902f4d878b772dd768aae44f6cc7a4c4e723aaf809039997df8f147386df17abdc514ca7070ffcc12260b9b98302fd948a6a8ed126eaef6984f274b5d9a3a400cc119b2c183e1010e321073afec1e1a3eaf9d57c59db3a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
        <category>2025.09</category>
      </categories>
  </entry>
  <entry>
    <title>SourceTree 的使用与远程仓库拉取</title>
    <url>/2025/10/18/%E5%B8%B8%E7%94%A8%E9%80%9F%E6%9F%A5/%E8%AE%BE%E7%BD%AE/SourceTree%20%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96/</url>
    <content><![CDATA[<h1 id="soucetree的使用"><a href="#soucetree的使用" class="headerlink" title="soucetree的使用"></a>soucetree的使用</h1><h2 id="1、配置soucetree的ssh"><a href="#1、配置soucetree的ssh" class="headerlink" title="1、配置soucetree的ssh"></a>1、配置soucetree的ssh</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251009202231718.png" alt="image-20251009202231639"></p>
<h2 id="2、远程拉取到本地"><a href="#2、远程拉取到本地" class="headerlink" title="2、远程拉取到本地"></a>2、远程拉取到本地</h2><p>如果要拉去远程仓库的数据，需要先清除已暂存的文件，即已暂存的文件为空才行</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251009203103215.png" alt="image-20251009203103130"></p>
<p>3、强制拉去远程的分钟的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/main</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>常用速查</category>
        <category>设置</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>sourcetree</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>2025.09.25</title>
    <url>/2025/09/25/%E6%97%A5%E8%AE%B0/2025.09/2025.09.28/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="80cb7ef8c20068da11757c3713a8c6eb0eb3ca629f1d7268d73a22042632b94e">1bd3bd312516a9a209976099ef49f4792deae15c5fd0040c215080c0eec0fc14475b642f7b3d6874c1f2a24503cab74d85cf0819ea93dabc4561ef7d8e819e0c8bfd12680aafbb565348d1547fde86d58ba02dc893e31fa7a7f17366ed8dcbc3022adc2db963ab809ca6ffca6f40689e7f91db0d7384be0c6ae2a28987b6e9b0f5b2335bcc41c1d11c630d605d11890fab2511f9d997782f06dd05cc125ec59dbe6aaf266d7ef663f81348c6e578de0bee520f0b8b3628b992d6da18225d7e930dfa8dafab16ff57da256e46a79f13009f36bb823f6185f1cf3d93e27098752a881f645659dae50ca8aef9174fa81c6766246f4728b75c660bfe4b92c1f2d554521525a841dc624b9511973da6f41de5175e31520a3f93b69c167c290a7b8224127c20d0b83c22c854c932c3a41486149097f6723e7df381e595bbdeea5666bdee76378b196f3644a7a153a6d4d46b2bc9847125fe6c48859987a9accb6f4f802e3f5927b9119c63991b9114ec2d39bd1a46360dd9852c4f5fc01f86910904354449c6186c8aa9fcd5656f846fafbd5c79c881e85323a0ee67b9240b668cf0640b6279c0552a0d3f1990d4ff8611d22c4947e83c28e0366748576dace2ff85a772ae6145fd09a5d3e651c47737d1520f5652ba2c59c35c145cad1c12c7b42981c490721c4210357a767192dc9c9d2c2f24fa347466a55fc533577a71204fbb4a946f809c4458f554918f81d2f6b075296dc18d865ace5d119dded6e06883fe5b71b0ac8637a9d36c87ac0067465ab29d3a715dbf279c99db5ecc88d33df98a7061a0679024e45539e5aac3df3acf1689e68ad795d0f7f1b439bdb7b9ecf5cdcb99b8145ce3c6c95dd9a4a58f4a647a82e3c87a724d865d8e1e9814c950b32e26fcb17f9df527271e43716cffe8fd27413d110f9ce297f3725fb0dae7c8ae5cf430296bf2f2cf9503c70861dbb161df4c1069305c4e6c3121c3c462905aa465fdede0572b8deaef100728838c126c36a9460ab4d4546f9524eadfb0c1f1e5dbbb7fc169c7da60c93d9390b1deafe79d2b84f3540381eede934317a8306e60bdccbf5e6d88947827080dd9adec6eb0bc3e0bb7300d490a353aa3ae1e4ec716dfaafa320123c941147475b13c717fdeb7f38be4d2da4f3ef9ace1b45a3f9f03c6216afc7a7b1101ce4b93ee7507c69a626471e36c41cdf1586cf1b5aecd0b8ca675153a0e2efdc322daca93f4e1e43712d55b15032ad9aad689ba732c7640f400bb958fa7cb38bc5af260694e952fa34a9e983106d83daddd90bbc3f1523a2e2802d5702a8b0f2ee4a522b43f714fe5faa5ce9c95e5e186f8bfbad0b3c57dca7203cd7898dac7f6c0b009e711ceffa0d3259d92402def3501df43770b1754b43efcdc99a3779e972abdafa944c3d46e833f510ce855d6a0a567c417d7eb12c3eb5b9920c30dbc1ae319f6d386fcb8d85dd799caad423d182696ce89deccdcb202769a94272a08be795ed7e3ebbba7ca5e5e72b6dbef0c90e004c8f848bdbfaa44b61a90f2509bcd8c2b2d29bd0329c787b02a1852a04f42c8ff815129b42a02f065ccfd70acfae007c33e3826349aea3a865c5ced66112429f9f8e4cc2e8e24f0d25ac97b2480108e8d8b9daec9c190ee1126add19e31eca4bba9df90d58553a32497805e155c42b46488c79089633632c30436073e3089c370dc1700f68b822309788190a487eea1f9aed365db1c2e076931726d91f630c3909b9bc6acf2f6f683d2b7c6f3e7b8eb53964e1b2a7fbc8679e17227ed615917cb67511451b0b44db21112f9ed68d0fa5ff30bf790cf460c1d5a76c29483121727150dad728303aab84e6bc9e21e884349917c36a69521be24914e4a500ccf03a04746a1a22c04be2b46b3a19d43ebd86fb3b66f32dc57089c3c0839e9027fdc4a3ccd0808540d7387b14b62f6bed25ca0cefcf030327874a990dc7ca51657d2278ecd7bc8856998ab6118626280da89045d602cf87b75a524f4c7b9ec93009968b40953ee3f9f25167ed8ad23d791139c8fe7ecc3f46a112458f287573f1af9ba17bdc42207960b3597c11f5952fbd162a8f233cad5cfe9dc0d81efa4575e2b66024ea6c0331c1b10fc1f9b4e796372f118c0bbaa45a70da756aac4b5884671d5045b96440f05ad2c501f01974cc96310b361e3e889473ee20ec9cae3b81238f108c7f4abb10eef8da025f8b958a925a85716b93a9fbb51dbe261ff3b7d9c2cd033e68373349ebc431c676ec5727e50700b8a728c876b2e111f3e1155b9a69edf5587094e410ed9ecb360cdb8bf58f3434117c79acc5bc15eb34ba00d78e524d12f832fa6f216746910515e0ad726e9652315cee03190996b28f1cf8f0d6e22978a97a5f7c74100989250144e2445e2aa3a7e1cddc98efbcab447d16ad3a33b5f8eceeee8c2b60dbcee9522b08079f99a4287aba94c0936c7972dd301c143f4597c2c46abb1139795b011352d34f041c0a6f3afc0614729f2a5027fa3cced81ebf3186b4934c14414fe298743353ce7175aae15c0a76f552bc59b91d9b92362546fdc975284bf7401574ef3a966fad42500f0b8408d1b6e2a3df4d535fd844e61ec6e1c73927c14c0b8a967f3121b6b3a9f6e1367c6c73cadd3f8b520f01c61c6277240de1ff45cfb004072018fcb51c658e7cc1624643910b58db56dbcff2342ff9421e2bb6300760da549eab07c3911f1ecc6214531eb1f0b42e70dde83c49e6423a5eb2d1a6f28cb900b9b689a3e919554501a36985a8caa31bf66b906ef81f4553f3e7352e3397b499dcc2b0a9bc4338d2521752337581ca1787e5a2735c77cf1a91c9c8a8944f35d35602a94f49a6c8a86801e0fd76f672ac25a71831362694ba76d759ba75d5cfca9ee4350c4ce3e3ca87d9746902c0ed5e75b8d075f8a5b145c197fa7033b248468cd79687c0cb395b8c2dd847a332c4fe4c4c9fe6de9de7916689d1c152f23693c54f4dce7c6cf3fbdafada2b0c042ef9de09309f4b39f68739acf80e390a25e9584e510e62562b4e537423394a55d2804eb2e04a609bf882bfc8ff77d6aff2baeda76855c4bc7fbc1c40225367e21795547911a5a3e9d75620471e7380b16836e33819a8982f9419d9d6bef048fba72338c7f8f0dc409377377b9bcf6a1332b39da97f404437a7ae0ab84cb95a4834a2816173e7ae47908b5bff2c2b256ab668e6fa6f774d983381f1ce3669017fdba6102e2430b97de18ad93e69d487c2d9371028fd62041e63ec9a3cc1a70f17de7c4624f0cb97fc606583a87e6a9adc95a7ec307125759daf7bf372962b99204988b5ef3528fc14a1047c7a32635d88c8169ae0bdd2dd3b43495a580c68b4410e57d1cb5a9a6b877711e340c236cedcecea13f7d763698215d1f495ab13515e72733c6aa8f0f89062c3a8b8b23fc1a9810eb83df9f610b5d9fdcb37acad528ad33ff79113b91236c6b2015e4a6d2577f803a5084a852de31d9db04d513a6f68a6565b827cde625d612a7b2cfd5229b36f2faf40c2008b02344a7da671caa69e0f74418b2affecca2a92634348fb69b2acaa5900d2902d071aad505ece7c1b5c78e989566319b45f488161bf32a682d7648010cb90013fc55b7672b753d8ad66a089eb7de103e19eba02519ca6448d0c6f8fc77d700058dac8a2db5725bd74d6d50aa612ae79d69e6faea412f87c6b3578882dfd5617b4945b77a2b70b45746c9953e849af9773dcb7d87a287db48e3c107187c5da24d7e7ed74da21de20886c7cee9f84dda17fa93cc4e32fd35361b9c12e33de1b480f0178736869ae1936df7bac8b41f5b929a583c651aa5a963a0d554e2b9af09145044c705f248c62f8fd8c7a9e0ce2b550aef1260841d686db79953bacee4da7847f74858494ffd2c12</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
        <category>2025.09</category>
      </categories>
  </entry>
  <entry>
    <title>2025.09.16</title>
    <url>/2025/09/16/%E6%97%A5%E8%AE%B0/2025.09/2025.09.16/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="98acd872a6ace6d0f5d9ea0d2746c2dbf9588060e02c6e525c617fd389e4ee9a">1bd3bd312516a9a209976099ef49f4793d61f084918d0fd1b3d3c77433bdd26f97b4a735ee3e6385658d8b3c350fd536c455c9b713000c118004b7c92cdb14d3d022fe385d683a6ccbbc56a2bf26929121134344cca187604873e2d2f217f979ddb504aa8b3f45349d15a38ba1bc59676c7b46b60c047003b5a2e5cca97bad40e462a454b6b3cb9926383bc4603a6030df2d560db9ab6a97e8003c697d07ff4dc74c0770352b488da5d6b0b1e94dfe57b1541f1098fa5f284d62be26fa25ab0c50181b09baddd76776443eb08560a5eed2b777fd5fa77b057a3ba7322a7043e3eb00088cf5b42dd7968e5469014b92567017237d53dfd947950fa8b0ea5be2959bc0acde9a454b83f02fb2accdb5d265166ab3ea37cb0e4a0db35f17b95730b5cdb3de757df01d12cc2de0728400dc834bba8f7b8481db3209a7a40bd53af40d5e365097757cf4c02c6c5b92f2f6d7b96aa395d02b96b874b7071d0f4da777122e88dcfbf8175d0ec3ef67fc3408cca5197a0d4b60c9894b50fb224c360a137703541f4e004726975a51b49c09e9b04d3471f63cf2287faf54beb56c34a93cb92902ca3c27f21dd098505147460e90f214442918d7efb3fcd4efc05a53926a7c7c9273bc9c6b3df791abcb76a40bb65ab544a4cc026014cc715c15ff64f03ab1a992f5c709f4af154d855a6d5c02b79aaf6a6249194465557389b0ff836a58c77fc3ed3e8622e68ec0694369d8a858571500ffee18b55c9d75f0ba86e8c892cacb7bbaa3ad8646ff0cd6fb55f0edb9db3577a77a0a794d0d34e9a0c14149e32442e991bc4214e4b884f90788356adb6cfaabe776556c011a824ab06bc511ab5ed6f436dc0ef4e42734b8c02fa9c96489de765178ed2b3c07d348c392461db958db3b97b078102242e57805e46d1a6bf93ce0874003e2627f3887e02c27ac317b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
        <category>2025.09</category>
      </categories>
  </entry>
  <entry>
    <title>2025.09.30</title>
    <url>/2025/09/30/%E6%97%A5%E8%AE%B0/2025.09/2025.09.30/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f57a74b256aea904fbccf47391397aa3ebeba52cac98c0807d22dca727d5529f">1bd3bd312516a9a209976099ef49f4797389c8360e6410486f2a0ffbcf6fb67da377a28cbeb648447fb5b04b62ada84b7e5552f7f3b45610851d9d574b11f5f6f0ed4acbdd03d98ee113a5a762681133609204869424e350310eb7f37b03d66aed7ef134616c300d0df0ace533650656c6a4bd05f77972c2b100ba731a5331fa8b492358cbb7794167c148da51e6e1f2044b8e513d50f84375366d310491fa173fe1d8741c2aed996bccc303b3458b8d6d9a3d7810814eb7a15b7bb6c5d8458b14026b40fa4f3831e15b379d4e0313a2059d43a346f4936f80fabe91221a1aa85da64db7a03e2de87a7806a4139733edec32fe1b1b3d63cc5c851ddde335513762a5a74143991ae2aea553ade00bfccfcb293239a32a371be555441235a14cfc7c393546ae655d003106c402b3f6333dba5c449acce28052b975f02dd7bdc98c6d86b1d29b8b4dfa02097f74fc071b0cd96538c296cf31a42164aa56da19a497f947cd31e16d8d1e1af082a00b65fe7bb1aea3a14a2df2370efe828d830a41aef3907c6059e6ba044ed6f9fe9c7585465312f9c14c47c3b8fcb3b96ee15466334541b58d893943027f6792043ca6b0c924f977dda34645d401c3abcc9b623a02f0a7d2a267da9abd900e09a69aad7889769d9110bb609a57b7f873db2b81408d4b89a230545efd8895ffff87b6599da7885f04e25e0704e394ef5b3986ab46d074b9066257cdc8f9d8d2d59dc53fc81352b8334151c3d6ca8d8b5fa811bc5a80ddea16e85f1b96f72b29e8def36a1c7a3467484eb26554676830e8ec9088fa2223918ab55afdf9247804500cd585a179b0b78fb8597c11f0eda179cad654316d7fab8ef71fe7beb9d9115999e97f8c954f103dfc465202ab479a85df9b074ebfb794edb26cccfb1e9432c93a25df375aa3ca1223cd621f5920a441cc5558e376b89e5fb89b09bc54858ecdec5ce4ade86fd838966ece6d0dc91b37e529dd528ea7c792ab667c5e12df310a540069bb29144f150b8859b3ce3b4f902eef28f9dd473e73ddb3992c03c8a35bb6febc70b5148e7037855d161d4cb44634b4002537f5193c1af2dcf514c0cd942fca6c22bc65d287cfbbb8de05fa187d607df7dc8872fec8e91be073f789c2c04de5e867aeda37375b802091a4ca18225752b34e587f13839a23cb4070ae6c977ed5c2988a0bd9ef1b44a03274dc76abd7edcf7fbab778fa23c9e54d7c214e79e7ed7385780f8193f0ee6e98a90e8f1af9dce06b556a642d58d8e48e6b84f58440079cd10a3aa5e4ee80c6cdd3df152e76a266e66a17ec3e483f39c434217c1b78b05742dec64efb57442f84d6b196ac417338669d897714fb66b1b8ac540d70f2d40bc2102712be7b3376aff8133f303c085085374120eae5b01c68525a81917918299124235ea8ed96911f5080302f96ff5823f6a60bf4e7e2e78a27800be40a7b7f218ee6588414f9e1ab547ebd2560e54f5faab890b30d9e41a10086472ff2255c2cd3f75e5e931e2c49a09da5e318bc7c0dd08662c7a0915cd62c3c70c03cd55b36de2f7f0518b4e47dca82568b0102a4cdd650cc1553dde32adc87bf1f7d027b91411152d6036893143b576d2b2dcdafb51af0768f87d6c2643af05ed95b1fbb993eb739be4abed975ec5b06e8598af30d220d4c189d6e095dfe01c9c09b9707a33dd676f6d2166e3d2466fa2f0239f245044da39f73578e21ab61d7f2959eecd43041907c50bde2e890c0c9e79f2c1e58f0b8a644e07d5c2d75f0f6d946471e7b6b8b460fcbfeb232d206448e05e376e9811926cae83a4ecf170b2c08bd4ee50b474d5540b8f42ee06eb1e4aacf36c880088fdad8ad34dfaad0312e4e6f40a17999518fd29bb7cefd8c86d9ee32f2636d32e6ac70ac4a44db26680caa6c79c59b3a02960fa18061d1e2ab9493b0c2afe83087208191a0c8e2d72ff004b7266f5e394cf85a975405cbb47f0ead298ebda1201ca64a9deac7dc71edd147a0c555389906ede421e8a9a8693d0681a7e6c6e6f6453b0001fc788d95425ce60474aa0c307893ff80a12763f0663b34a7d23dd8dae12d161673b6b58b461a173855210a6e291ddd2b4c8e93210f2367596e04443c5a5b634761a13169e38c9b01ab6754c95691109004474803b070a86130d2fc6785ccdbbbdfa7d4389c090241eee4be818f94658aa72769e287d4c509cc2ad88b3a8fe24b0cd0bf4a02fff685dad1e445b899cde30ec9863f9cbbb55f51c9c0c17224e61d9e52a6323554de4743d80d80cbd9a7039f0f0cce4a83b0474b016c9149b700e97c2f8e2332b881583feeccb462c03318a83eb469b70b52ec8995ff49a2aad9138752bbb41dec6a2d320e73defd11d010435f9251378ab9d8eeea907a9933db3f7001e5f33caee9656195df319ef93b250c7cfe8898a6c7b51de29fcffa13dd5d26992ef642a4b759104e96419af3ded25e21ff28705c8b1767dbae756ce750416a3a772016e1a2e95ff09e465bde9e51bdcb7b4e6f01b299327ce7e43d073544507add94454cf8c2f7a44fa40908b245c36b3959a3744aeba738bab50ad3851933a6c33b7b30a61c58fe3d3f491927355df17782c26451e5d6900ce3900d27131c2ec210e7669b35428cdae6223f287295342f97b9af72a8f69b0b4ff0260fd4a9e105fd2c7fd2730d05bf002ea6987e60d7ae00b7671c1294416d89d42f5dc87ad3e1c408f3b22f88f14e8c99130c708c19317f16caadd42c0bd5838a8c68766211a06cecb0860d5bd090d9446cf490c74e669d317033be92544ad309d6be01924f4ca1ffdd8753ee3ed42ae1ca485d5b6e1fe373dca51d607139b6aa4ad80c14d105ad01c45e1ed61ba9cd</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>日记</category>
        <category>2025.09</category>
      </categories>
  </entry>
  <entry>
    <title>Quicker 窗口操作教程</title>
    <url>/2025/07/30/%E6%95%88%E7%8E%87%E9%85%8D%E7%BD%AE/Quicker/Quicker%E7%9A%84%E7%AA%97%E5%8F%A3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="quicker的窗口操作"><a href="#quicker的窗口操作" class="headerlink" title="quicker的窗口操作"></a>quicker的窗口操作</h1><p>获取所有窗口</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250730175436813.png" alt="image-20250730175436725"></p>
<p>可以得到窗口的id和名称</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250730175521425.png" alt="image-20250730175521383"></p>
<p>在窗口操作里面能对窗口进行缩小还原的操作</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250730175618326.png" alt="image-20250730175618258"></p>
]]></content>
      <categories>
        <category>效率配置</category>
        <category>Quicker</category>
      </categories>
      <tags>
        <tag>quicker</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 终端命令行参数传递教程</title>
    <url>/2025/09/30/%E6%95%88%E7%8E%87%E9%85%8D%E7%BD%AE/Quicker/Windows%20%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="win终端命令行接收参数进行传递"><a href="#win终端命令行接收参数进行传递" class="headerlink" title="win终端命令行接收参数进行传递"></a>win终端命令行接收参数进行传递</h2><h3 id="1、单个参数传递"><a href="#1、单个参数传递" class="headerlink" title="1、单个参数传递"></a>1、单个参数传递</h3><p>py代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line"># 获取命令行传入的第一个参数</span><br><span class="line">arg = sys.argv[1]</span><br><span class="line"></span><br><span class="line"># 打印出来</span><br><span class="line">print(&quot;接收到的参数是：&quot;, arg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>终端运行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python C:\Users\zxz\Desktop\2.py 你好</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">接收到的参数是： 你好</span><br></pre></td></tr></table></figure>



<h3 id="2、多个参数传递"><a href="#2、多个参数传递" class="headerlink" title="2、多个参数传递"></a>2、多个参数传递</h3><p>py代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line"># sys.argv[0] 是脚本名，后面的都是传入的参数</span><br><span class="line">args = sys.argv[1:]  # 获取所有参数</span><br><span class="line"></span><br><span class="line">print(&quot;接收到的参数有：&quot;, args)</span><br><span class="line"></span><br><span class="line"># 如果想单独处理每个参数</span><br><span class="line">for i, arg in enumerate(args, 1):</span><br><span class="line">    print(f&quot;参数&#123;i&#125;：&#123;arg&#125;&quot;)</span><br></pre></td></tr></table></figure>

<p>终端代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python C:\Users\zxz\Desktop\2.py 你好 123 abc</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">接收到的参数有： [&#x27;你好&#x27;, &#x27;123&#x27;, &#x27;abc&#x27;]</span><br><span class="line">参数1：你好</span><br><span class="line">参数2：123</span><br><span class="line">参数3：abc</span><br></pre></td></tr></table></figure>



<h3 id="3、终端文件后台运行（即不弹出黑框来）"><a href="#3、终端文件后台运行（即不弹出黑框来）" class="headerlink" title="3、终端文件后台运行（即不弹出黑框来）"></a>3、终端文件后台运行（即不弹出黑框来）</h3><p>（1）直接quicker勾选 <strong>隐藏窗口&#x2F;后台运行</strong>（Quicker 一般有这个选项）。</p>
<p>（2）把你的脚本文件扩展名改为 <code>.pyw</code>，比如 <code>example.pyw</code>。双击或用 <code>pythonw.exe</code> 运行时不会弹出黑框。</p>
<p>命令示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pythonw &quot;C:\path\to\example.pyw&quot; 参数1 参数2</span><br></pre></td></tr></table></figure>



<p>作用，可以成为跨语言的连接桥梁，比如我的quicker和py的连接，可以使用quicker快速获取选中文件的一些数据作为参数传给py脚本当中作为变量。很实用。</p>
]]></content>
      <categories>
        <category>效率配置</category>
        <category>Quicker</category>
      </categories>
      <tags>
        <tag>quicker</tag>
        <tag>windows</tag>
        <tag>python</tag>
        <tag>脚本自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>理解回调函数</title>
    <url>/2025/02/17/%E6%B7%B1%E7%A0%94%E8%AE%B0%E5%BD%95/Python/%E7%90%86%E8%A7%A3%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>例如，实际上就是一个函数当中的一个参数为函数就这么简单了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function greet(name, callback) &#123;</span><br><span class="line">  console.log(&quot;Hello, &quot; + name);</span><br><span class="line">  callback();  // 执行回调函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sayGoodbye() &#123;</span><br><span class="line">  console.log(&quot;Goodbye!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(&quot;Alice&quot;, sayGoodbye);  // greet函数接收sayGoodbye作为回调函数</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>深研记录</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows查看wifi密码</title>
    <url>/2025/09/30/%E6%95%88%E7%8E%87%E9%85%8D%E7%BD%AE/Windows/Windows%E6%9F%A5%E7%9C%8Bwifi%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h1 id="Windows查看wifi密码"><a href="#Windows查看wifi密码" class="headerlink" title="Windows查看wifi密码"></a>Windows查看wifi密码</h1><ol>
<li>打开“命令提示符（以管理员身份）”或 PowerShell（管理员）。</li>
<li>列出曾连接过的 Wi-Fi 名称（配置文件）：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh wlan show profiles</span><br></pre></td></tr></table></figure>

<ol>
<li>查看某个网络的密码（把<code>SSID_NAME</code>替换为上一步看到的名称）：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh wlan show profile name=&quot;SSID_NAME&quot; key=clear</span><br></pre></td></tr></table></figure>

<p>输出里找 <code>关键内容（Key Content）</code> &#x2F; <code>Key Content</code>，那行就是密码。</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250918095039411.png" alt="image-20250918095039332"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250918095108490.png" alt="image-20250918095108417"></p>
]]></content>
      <categories>
        <category>效率配置</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>wifi</tag>
      </tags>
  </entry>
  <entry>
    <title>理解 python 的 if __name__ == &#39;__main__&#39;</title>
    <url>/2025/08/05/%E6%B7%B1%E7%A0%94%E8%AE%B0%E5%BD%95/Python/%E7%90%86%E8%A7%A3python%E7%9A%84if%20name%20==%20main/</url>
    <content><![CDATA[<h3 id="✅-一、没有加-if-name-main-："><a href="#✅-一、没有加-if-name-main-：" class="headerlink" title="✅ 一、没有加 if __name__ == &quot;__main__&quot;："></a>✅ <strong>一、没有加 <code>if __name__ == &quot;__main__&quot;</code>：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python复制编辑# demo.py</span><br><span class="line"></span><br><span class="line">print(&quot;脚本开始执行&quot;)</span><br><span class="line"></span><br><span class="line">def say_hi():</span><br><span class="line">    print(&quot;Hi!&quot;)</span><br><span class="line"></span><br><span class="line">say_hi()</span><br></pre></td></tr></table></figure>

<h4 id="👉-结果："><a href="#👉-结果：" class="headerlink" title="👉 结果："></a>👉 结果：</h4><ul>
<li><p>直接运行：会输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制编辑脚本开始执行</span><br><span class="line">Hi!</span><br></pre></td></tr></table></figure>
</li>
<li><p>被 <code>import demo</code> 导入：也会<strong>自动输出</strong>上面的内容，因为 <code>print()</code> 和 <code>say_hi()</code> 是顶层代码，导入时就会执行。</p>
</li>
</ul>
<hr>
<h3 id="✅-二、加了-if-name-main-："><a href="#✅-二、加了-if-name-main-：" class="headerlink" title="✅ 二、加了 if __name__ == &quot;__main__&quot;："></a>✅ <strong>二、加了 <code>if __name__ == &quot;__main__&quot;</code>：</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python复制编辑# demo.py</span><br><span class="line"></span><br><span class="line">print(&quot;模块被加载了&quot;)</span><br><span class="line"></span><br><span class="line">def say_hi():</span><br><span class="line">    print(&quot;Hi!&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    print(&quot;脚本开始执行&quot;)</span><br><span class="line">    say_hi()</span><br></pre></td></tr></table></figure>

<h4 id="👉-结果：-1"><a href="#👉-结果：-1" class="headerlink" title="👉 结果："></a>👉 结果：</h4><ul>
<li><p>直接运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制编辑模块被加载了</span><br><span class="line">脚本开始执行</span><br><span class="line">Hi!</span><br></pre></td></tr></table></figure>
</li>
<li><p>被 <code>import demo</code> 导入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制编辑</span><br><span class="line">模块被加载了</span><br></pre></td></tr></table></figure>

<p>✅ 只执行了最外层的 <code>print()</code>，<code>if __name__ == &quot;__main__&quot;:</code> 里的内容不会自动跑。</p>
</li>
</ul>
<hr>
<h3 id="✅-小总结："><a href="#✅-小总结：" class="headerlink" title="✅ 小总结："></a>✅ 小总结：</h3><ul>
<li>你写在 <code>if __name__ == &quot;__main__&quot;:</code> <strong>外面</strong> 的代码，在导入时就会执行。</li>
<li>你写在 <code>if __name__ == &quot;__main__&quot;:</code> <strong>里面</strong> 的代码，只在<strong>直接运行</strong>这个脚本时执行。</li>
</ul>
<p>所以如果你希望脚本被导入时“干净点”，就别把主逻辑写在外面，而是包在 <code>if __name__ == &quot;__main__&quot;</code> 里。</p>
<hr>
<p>你想不想试试自己写一个脚本，然后新建一个文件导入它，感受一下这种差异？我可以帮你搭个结构~</p>
]]></content>
      <categories>
        <category>深研记录</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>图床</title>
    <url>/2025/02/17/%E6%95%88%E7%8E%87%E9%85%8D%E7%BD%AE/Windows/%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>在typora中，图片一般是只保存在本地的，如果要分享或者上传到库中备份，则图片无法加载。这里采用阿里云+PicList来实现云图床。</p>
<h2 id="第一步-阿里云的oss"><a href="#第一步-阿里云的oss" class="headerlink" title="第一步 阿里云的oss"></a>第一步 阿里云的oss</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240426211841633.png" alt="image-20240426211841633"></p>
<p>新建一个bucket</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240426212023781.png" alt="image-20240426212023781"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240426212049855.png" alt="image-20240426212049855"></p>
<p>设置一个accesskey  包含id和密码 这个要记住一会有用</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240426212216063.png" alt="image-20240426212216063"></p>
<p>然后基本完成了</p>
<h2 id="第二步-下载PicList"><a href="#第二步-下载PicList" class="headerlink" title="第二步 下载PicList"></a>第二步 下载PicList</h2><p>主要讲解如何配置</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240426211714882.png" alt="image-20240426211714882"></p>
<p><img src="https://zxzmac.oss-cn-beijing.aliyuncs.com/image-20250108220931737.png" alt="image-20250108220931737"></p>
<p>这些信息就是刚刚注册bucket时的，填写好。</p>
<p>然后在配置一下serve</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240426212430431.png" alt="image-20240426212430431"></p>
<h2 id="第三步-typora中的设置"><a href="#第三步-typora中的设置" class="headerlink" title="第三步 typora中的设置"></a>第三步 typora中的设置</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240426212508604.png" alt="image-20240426212508604"></p>
]]></content>
      <categories>
        <category>效率配置</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>win软件配置</title>
    <url>/2025/02/25/%E6%95%88%E7%8E%87%E9%85%8D%E7%BD%AE/Windows/win%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="1、Typora"><a href="#1、Typora" class="headerlink" title="1、Typora"></a>1、Typora</h2><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/rbscc3mo.vr3.png" alt="rbscc3mo.vr3" style="zoom: 50%;" /> 

<p> 这是一个md文件的编辑软件经常使用的，感觉还不错吧</p>
<h2 id="2、TTime"><a href="#2、TTime" class="headerlink" title="2、TTime"></a>2、TTime</h2><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/pekrp2uc.kft.png" alt="pekrp2uc.kft" style="zoom: 67%;" /> 

<p>可以orc进行识别，效果还可以的</p>
<h2 id="3、idm"><a href="#3、idm" class="headerlink" title="3、idm"></a>3、idm</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/yr4emjxc.t1f.png" alt="yr4emjxc.t1f"> </p>
<p>宇宙级下载器，也不多说了，已经入了永久版了</p>
<h2 id="4、Twinkle-Tray"><a href="#4、Twinkle-Tray" class="headerlink" title="4、Twinkle Tray"></a>4、Twinkle Tray</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/%7B7F62F815-DA19-496B-B7C4-C14565EE7C2E%7D" alt="img"> </p>
<p> 能调剂电脑的显示亮度，感觉还是很有用的</p>
<h2 id="5、QuickLook"><a href="#5、QuickLook" class="headerlink" title="5、QuickLook"></a>5、QuickLook</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/%7B467D6B48-7DB5-4184-83B9-FCFF19823257%7D" alt="img"> </p>
<p>按空格快速浏览文件，类似于mac上的空格</p>
<h2 id="6、TranslucentTB"><a href="#6、TranslucentTB" class="headerlink" title="6、TranslucentTB"></a>6、TranslucentTB</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/e5mss02y.4im.png" alt="img"> </p>
<p>一个能改变win底部框的小软件</p>
<h2 id="7、Advanced-Archive-Password-Recovery"><a href="#7、Advanced-Archive-Password-Recovery" class="headerlink" title="7、Advanced Archive Password Recovery"></a>7、Advanced Archive Password Recovery</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/q02tb3to.y1u.png" alt="q02tb3to.y1u"> </p>
<p>暴力破解压缩包的工具</p>
<h2 id="8、Clash-for-Windows"><a href="#8、Clash-for-Windows" class="headerlink" title="8、Clash for Windows"></a>8、Clash for Windows</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/egew3ebt.y53.png" alt="egew3ebt.y53"> </p>
<p>翻墙软件</p>
<h2 id="9、PicList"><a href="#9、PicList" class="headerlink" title="9、PicList"></a>9、PicList</h2><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/fxunb05c.pn5.png" alt="fxunb05c.pn5" style="zoom:67%;" /> 

<p>图床软件，和typora相关一起用</p>
<h2 id="10、QQ截图独立版"><a href="#10、QQ截图独立版" class="headerlink" title="10、QQ截图独立版"></a>10、QQ截图独立版</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/05rmscg5.zre.png" alt="05rmscg5.zre"> </p>
<p>截图软件，好用</p>
<h2 id="11、平板串流"><a href="#11、平板串流" class="headerlink" title="11、平板串流"></a>11、平板串流</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/vnizhs3a.3rk.png" alt="vnizhs3a.3rk"> <img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/04innbpq.ob4.png" alt="04innbpq.ob4" style="zoom:67%;" /></p>
<p>这两个软件，第一个是虚拟屏幕，第二个是串流，详细配置去b站搜索平板串流有教程</p>
<h2 id="12、Powerloys"><a href="#12、Powerloys" class="headerlink" title="12、Powerloys"></a>12、Powerloys</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015171357781.png"></p>
<p>微软自家的多功能插件，必装</p>
<h2 id="13、火绒"><a href="#13、火绒" class="headerlink" title="13、火绒"></a>13、火绒</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/ashircrk.teo.png" alt="ashircrk.teo"> </p>
<p>真心不错的杀毒软件，它的弹窗拦截好评</p>
<h2 id="14、Adobe-Acrobat-DC"><a href="#14、Adobe-Acrobat-DC" class="headerlink" title="14、Adobe Acrobat DC"></a>14、Adobe Acrobat DC</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/3i3151rf.rw5.png" alt="3i3151rf.rw5"> </p>
<p>pdf神奇了属于</p>
<h2 id="15、Draw-io"><a href="#15、Draw-io" class="headerlink" title="15、Draw.io"></a>15、Draw.io</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/hlvei5yf.zoy.png" alt="hlvei5yf.zoy"> </p>
<p>流程图神器</p>
<h2 id="16、Quicker"><a href="#16、Quicker" class="headerlink" title="16、Quicker"></a>16、Quicker</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/dwxincma.v35.png" alt="dwxincma.v35"> </p>
<p>绝对的神器，能快速启动软件，能自己编一些程序，然后通过其一键打开。十分十分有用对于我来说，当然这个配置也最麻烦。</p>
<h2 id="17、篡改猴"><a href="#17、篡改猴" class="headerlink" title="17、篡改猴"></a>17、篡改猴</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/igrbehke.41v.png" alt="igrbehke.41v"> </p>
<p>油猴脚本，可以自己写一些js代码在浏览器上执行，很不错</p>
<h2 id="18、沉汉式翻译"><a href="#18、沉汉式翻译" class="headerlink" title="18、沉汉式翻译"></a>18、沉汉式翻译</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/jjbe1frv.44w.png" alt="jjbe1frv.44w"> </p>
<p>浏览器翻译的神</p>
<h2 id="19、OBS-Studio"><a href="#19、OBS-Studio" class="headerlink" title="19、OBS Studio"></a>19、OBS Studio</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/mwcu1x2l.cym.png" alt="mwcu1x2l.cym"> </p>
<p>录屏直播软件好评</p>
<h2 id="20、Todesk"><a href="#20、Todesk" class="headerlink" title="20、Todesk"></a>20、Todesk</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/qjeg3pvd.yux.png" alt="qjeg3pvd.yux"> </p>
<p>远程控制软件，也没什么好的，没办法暂时就这个好点</p>
<h2 id="21、GIT"><a href="#21、GIT" class="headerlink" title="21、GIT"></a>21、GIT</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/kf5fi0yx.uop.png" alt="kf5fi0yx.uop"> </p>
<p>git的终端操作器好用</p>
<h2 id="22、Docker"><a href="#22、Docker" class="headerlink" title="22、Docker"></a>22、Docker</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/1mwtcjqb.byp.png" alt="1mwtcjqb.byp"> </p>
<p>容器</p>
<h2 id="23、Mysql"><a href="#23、Mysql" class="headerlink" title="23、Mysql"></a>23、Mysql</h2><p>数据库</p>
<h2 id="24、Xshell"><a href="#24、Xshell" class="headerlink" title="24、Xshell"></a>24、Xshell</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/ajiqvzrk.jfp.png" alt="ajiqvzrk.jfp"> </p>
<p>远程连接服务器终端的</p>
<h2 id="25、Postman"><a href="#25、Postman" class="headerlink" title="25、Postman"></a>25、Postman</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/izysicai.l4z.png" alt="izysicai.l4z"> </p>
<p>后端api测试工具</p>
<h2 id="26、VMware"><a href="#26、VMware" class="headerlink" title="26、VMware"></a>26、VMware</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/uuwjmqqk.ac1.png" alt="uuwjmqqk.ac1"> </p>
<p>虚拟机</p>
<h2 id="27、Hbuilder"><a href="#27、Hbuilder" class="headerlink" title="27、Hbuilder"></a>27、Hbuilder</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/z0eadlkh.hax.png" alt="z0eadlkh.hax"> </p>
<p>前端的idea</p>
<h2 id="28、Vscode"><a href="#28、Vscode" class="headerlink" title="28、Vscode"></a>28、Vscode</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/evalbizt.0eq.png" alt="evalbizt.0eq"> </p>
<p>全能好用的ide </p>
<h2 id="29、Intell"><a href="#29、Intell" class="headerlink" title="29、Intell"></a>29、Intell</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/er5hhttb.ivz.png" alt="er5hhttb.ivz"> </p>
<p>java的idea</p>
<h2 id="30、Navicat-Premium"><a href="#30、Navicat-Premium" class="headerlink" title="30、Navicat Premium"></a>30、Navicat Premium</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/ucbwaunc.snf.png" alt="ucbwaunc.snf"> </p>
<p>远程数据库管理软件 </p>
<h2 id="31、Xmind"><a href="#31、Xmind" class="headerlink" title="31、Xmind"></a>31、Xmind</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/4klfjefg.5vr.png" alt="4klfjefg.5vr"> </p>
<p>不多说，思维导图软件 </p>
<h2 id="32、figma"><a href="#32、figma" class="headerlink" title="32、figma"></a>32、figma</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20250224161209063.png" alt="image-20250224161209063"> </p>
<p>网页设计软件，不太会 </p>
<h2 id="33、WSL"><a href="#33、WSL" class="headerlink" title="33、WSL"></a>33、WSL</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/30louyag.2oc.png" alt="30louyag.2oc"> </p>
<p>win下的linux系统</p>
<h2 id="34、Anaconda-Navigator"><a href="#34、Anaconda-Navigator" class="headerlink" title="34、Anaconda Navigator"></a>34、Anaconda Navigator</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/mryxkjdd.4mz.png" alt="mryxkjdd.4mz"> </p>
<p>python必装的东西 </p>
<h2 id="35、OneDrive"><a href="#35、OneDrive" class="headerlink" title="35、OneDrive"></a>35、OneDrive</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/pzigh3cd.hq5.png" alt="pzigh3cd.hq5"> </p>
<p>云盘</p>
<h2 id="36、word实用工具插件"><a href="#36、word实用工具插件" class="headerlink" title="36、word实用工具插件"></a>36、word实用工具插件</h2><p>可以支持正则表达</p>
<h2 id="37、方方格子和uuoffice"><a href="#37、方方格子和uuoffice" class="headerlink" title="37、方方格子和uuoffice"></a>37、方方格子和uuoffice</h2><p>基本上就这些了，其他也没什么好说的了</p>
<h2 id="38、LocalSend"><a href="#38、LocalSend" class="headerlink" title="38、LocalSend"></a>38、LocalSend</h2><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/wkbhozcl.yvz.png" alt="wkbhozcl.yvz" style="zoom:50%;" /> 

<p>局域网文件传输工具</p>
<h2 id="39、SyncClipboard"><a href="#39、SyncClipboard" class="headerlink" title="39、SyncClipboard"></a>39、SyncClipboard</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/ihjt1nkh.lml.png" alt="ihjt1nkh.lml"> </p>
<p>云粘贴版,有点麻烦，还要在服务器里面配置</p>
<h2 id="40、Everything"><a href="#40、Everything" class="headerlink" title="40、Everything"></a>40、Everything</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/%7B4268A7C3-5DF7-4DE5-8852-991EB733C2CC%7D" alt="img"> </p>
<p>文件搜索神器</p>
<h2 id="41、MouserInc"><a href="#41、MouserInc" class="headerlink" title="41、MouserInc"></a>41、MouserInc</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015170629683.png" alt="image-20251015170629620">  </p>
<p>鼠标手势神器</p>
<h2 id="42、Webstorm"><a href="#42、Webstorm" class="headerlink" title="42、Webstorm"></a>42、Webstorm</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015171044281.png" alt="image-20251015171044228">  </p>
<p>前端的idea</p>
<h2 id="43、Soucetree"><a href="#43、Soucetree" class="headerlink" title="43、Soucetree"></a>43、Soucetree</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015171129347.png" alt="image-20251015171129304">  </p>
<p>git控制神器</p>
<h2 id="44、NOI浏览器"><a href="#44、NOI浏览器" class="headerlink" title="44、NOI浏览器"></a>44、NOI浏览器</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015171504257.png" alt="image-20251015171504210">  </p>
<p>帮助快速多个的打开ai工具</p>
<h2 id="45、图吧工具箱"><a href="#45、图吧工具箱" class="headerlink" title="45、图吧工具箱"></a>45、图吧工具箱</h2><p> <img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015171550620.png" alt="image-20251015171550576"> </p>
<p>很多有用的电脑测试工具</p>
<h2 id="46、burpsuit"><a href="#46、burpsuit" class="headerlink" title="46、burpsuit"></a>46、burpsuit</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015171657342.png" alt="image-20251015171657296">  </p>
<p>好用的抓包暴力破解的软件</p>
<h2 id="47、IObit-Unlocker"><a href="#47、IObit-Unlocker" class="headerlink" title="47、IObit Unlocker"></a>47、IObit Unlocker</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015171729459.png" alt="20251015_171715_986">  </p>
<p>强制删除已经打开运行当中文件</p>
<h2 id="48、失易得数据恢复"><a href="#48、失易得数据恢复" class="headerlink" title="48、失易得数据恢复"></a>48、失易得数据恢复</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015171811198.png" alt="20251015_171757_226">  </p>
<p>年少无知的充值了永久会员，虽然没什么用，但我充了钱啊</p>
]]></content>
      <categories>
        <category>效率配置</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑SMB连接打印机-直接打印机扫描文件传输到电脑上</title>
    <url>/2025/02/18/%E6%95%88%E7%8E%87%E9%85%8D%E7%BD%AE/Windows/%E7%94%B5%E8%84%91SMB%E8%BF%9E%E6%8E%A5%E6%89%93%E5%8D%B0%E6%9C%BA-%E7%9B%B4%E6%8E%A5%E6%89%93%E5%8D%B0%E6%9C%BA%E6%89%AB%E6%8F%8F%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%88%B0%E7%94%B5%E8%84%91%E4%B8%8A/</url>
    <content><![CDATA[<p>1、创建一个共享文件</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193034235.png" alt="image-20241209193034235"></p>
<p>2、共享的相关设置</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193100350.png" alt="image-20241209193100350"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193127090.png" alt="image-20241209193127090"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193152143.png" alt="image-20241209193152143"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193218642.png" alt="image-20241209193218642"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193229896.png" alt="image-20241209193229896"></p>
<p>还有个设置，打开触控面板里面的程序设置</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193402217.png" alt="image-20241209193402217"></p>
<p>然后就是访问打印机的ip地址了。直接浏览器输入打印机ip地址</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193514187.png" alt="image-20241209193514187"></p>
<p>然后找到通讯录</p>
<p>设置SMB功能，然后注册</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193743809.png" alt="image-20241209193743809"></p>
<p>然后确定，然后就配置好了。</p>
<p>总结一下，首先创建一个共享文件，然后配置共享文件的权限，有三步</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20241209193903027.png" alt="image-20241209193903027"></p>
<p>在然后是计算机程序里面的SMB打开。好了，剩下就是连接打印机ip在上面的通讯录里面添加自己的信息了。具体上面已经写好了，不在复述。</p>
]]></content>
      <categories>
        <category>效率配置</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 系统终端环境变量配置详解</title>
    <url>/2025/10/04/%E6%95%88%E7%8E%87%E9%85%8D%E7%BD%AE/Windows/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E8%87%B3win%E7%B3%BB%E7%BB%9F%E7%BB%88%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="配置环境至win系统终端"><a href="#配置环境至win系统终端" class="headerlink" title="配置环境至win系统终端"></a>配置环境至win系统终端</h1><p>使用win+x,进入系统,然后点击高级系统设置,在里面高级选项卡下选择环境变量.</p>
<p><img src="https://zxzmac.oss-cn-beijing.aliyuncs.com/image-20251004214838658.png" alt="image-20251004214838658"></p>
<p>然后在系统变量中，双击path，然后新建，找到文件所在的目录、Library\bin所在目录、Scripts所在目录。如果不知道anconda安装的位置可以自己找一下,默认位置是C:\Users\admin\anaconda3.</p>
<p><img src="https://zxzmac.oss-cn-beijing.aliyuncs.com/image-20251004215910015.png" alt="image-20251004215910015"></p>
<p>最后验证一下输入conda –version</p>
<p><img src="https://zxzmac.oss-cn-beijing.aliyuncs.com/image-20251004220047192.png" alt="image-20251004220047192"></p>
]]></content>
      <categories>
        <category>效率配置</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>环境变量</tag>
        <tag>终端</tag>
        <tag>系统配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo个人博客搭建</title>
    <url>/2025/02/16/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="本地搭建"><a href="#本地搭建" class="headerlink" title="本地搭建"></a>本地搭建</h2><p>1、先安环境，查看是否安装</p>
<p>检查git是否安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure>

<p>检查node是否安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>2、本地搭建</p>
<p>安装hexo脚手架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>进入指定文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd  /c/Users/zxz/Desktop</span><br></pre></td></tr></table></figure>

<p>初始化一个hexo项目在该文件夹下，文件名为test</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init test</span><br></pre></td></tr></table></figure>

<p>如果安装不全，则进入test文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd test</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>生成对应文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/cypa2a31.va3.png" alt="cypa2a31.va3" style="zoom: 50%;" />  

<p>启动服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>



<h2 id="一些常用的hexo命令"><a href="#一些常用的hexo命令" class="headerlink" title="一些常用的hexo命令"></a>一些常用的hexo命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;	#生成新的post文章</span><br><span class="line">$ hexo s	#启动服务</span><br><span class="line">$ hexo g	#更新文件</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 主题自定义步骤</title>
    <url>/2025/10/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Hexo%E5%8D%9A%E5%AE%A2/Hexo-next%E8%87%AA%E5%AE%9A%E4%B9%89%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="hexo-next自定义思路"><a href="#hexo-next自定义思路" class="headerlink" title="hexo-next自定义思路"></a>hexo-next自定义思路</h2><p>1、先添加什么自定义的东西，比如一个按钮，可以先将其html，css，js写在一个网页当中，更改实现其功能。然后分析next主题的结构去进行更改，这里比如说我想在所有页面添加东西，就直接在下面文件里更改，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes\next\layout\category.njk</span><br></pre></td></tr></table></figure>

<p>2、只想在首页和文章页更改则去themes\next\layout_macro\post.njk不过要设一下条件然后在themes\next\layout\index.njk里面在加一下就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if not is_index %&#125;</span><br><span class="line">  &lt;!-- 圆形主按钮 --&gt;</span><br><span class="line">  &lt;button class=&quot;main-btn&quot;&gt;&amp;#9776;&lt;/button&gt;</span><br><span class="line">  &lt;!-- 展开的两个按钮（无连接线） --&gt;</span><br><span class="line">  &lt;div class=&quot;arrow-btns&quot;&gt;</span><br><span class="line">      &lt;button class=&quot;arrow-btn up-btn&quot;&gt;&amp;#9650;&lt;/button&gt;</span><br><span class="line">      &lt;button class=&quot;arrow-btn down-btn&quot;&gt;&amp;#9660;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>3、类似于这个思路可以进行所有页面的自定义添加</p>
<p>当然添加的js文件推荐都放在themes\next\layout_scripts\index.njk里面</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo下的next实现多级分类</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E4%B8%8B%E7%9A%84next%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%A7%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p>效果图</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250805165141675.png" alt="image-20250805164016084"></p>
<p>1、在\themes\next\layout_partials\page\categories.njk文件里面直接改为以下代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;category-all-page&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;category-all-title&quot;&gt;</span><br><span class="line">    &#123;&#123; _p(&#x27;counter.categories&#x27;, site.categories.length) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;category-all&quot;&gt;</span><br><span class="line">    &#123;&#123; list_categories() &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .category-list .category-list-child &#123;</span><br><span class="line">    display: none;</span><br><span class="line">    margin-left: 1em;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list,</span><br><span class="line">  .category-list ul &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    padding-left: 0;</span><br><span class="line">    margin-left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .category-list .has-children &gt; .category-list-link &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    padding-left: 0.9em;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list .has-children &gt; .category-list-link::before &#123;</span><br><span class="line">    content: &quot;▶&quot;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 2px;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    color: #666;</span><br><span class="line">    transition: transform 0.3s ease;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .category-list .has-children.expanded &gt; .category-list-link::before &#123;</span><br><span class="line">    content: &quot;▼&quot;;</span><br><span class="line">    transform: rotate(0deg);</span><br><span class="line">    color: #222;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $(document).ready(function () &#123;</span><br><span class="line">    // 初始化：标记所有有子级的元素</span><br><span class="line">    $(&#x27;.category-list-item&#x27;).each(function () &#123;</span><br><span class="line">      const child = $(this).children(&#x27;.category-list-child&#x27;);</span><br><span class="line">      if (child.length &gt; 0) &#123;</span><br><span class="line">        $(this).addClass(&#x27;has-children&#x27;);</span><br><span class="line">        const link = $(this).children(&#x27;.category-list-link&#x27;);</span><br><span class="line">        link.attr(&#x27;href&#x27;, &#x27;javascript:void(0)&#x27;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 点击展开/收起</span><br><span class="line">    $(&#x27;.category-list&#x27;).on(&#x27;click&#x27;, &#x27;.category-list-link&#x27;, function (e) &#123;</span><br><span class="line">      const parent = $(this).parent(&#x27;.has-children&#x27;);</span><br><span class="line">      const childList = parent.children(&#x27;.category-list-child&#x27;);</span><br><span class="line"></span><br><span class="line">      if (childList.length &gt; 0) &#123;</span><br><span class="line">        childList.slideToggle(200);</span><br><span class="line">        parent.toggleClass(&#x27;expanded&#x27;);</span><br><span class="line">        e.preventDefault(); // 阻止链接跳转</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章加密</title>
    <url>/2025/09/15/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Hexo%E5%8D%9A%E5%AE%A2/Hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>

<h4 id="配置站点文件"><a href="#配置站点文件" class="headerlink" title="配置站点文件"></a>配置站点文件</h4><p>站点配置文件中可能就直接有以下代码，将<code>enable: false</code> 改为 <code>enable: true</code> 即可启用插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Security</span><br><span class="line">##</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<p>如果站点配置文件没有如下代码，直接在最后面加上这些内容就行</p>
<h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><p>如果需要使用，在文章的头部配置中添加上相应的字段，如password、message等，如下图</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250915163506730.png" alt="company模板"></p>
<p>发布文章后如果想要访问，就需要输入密码了</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Quicker博客一键同步</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Hexo%E5%8D%9A%E5%AE%A2/Quicker%E5%8D%9A%E5%AE%A2%E4%B8%80%E9%94%AE%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>首先再到gitbash的位置，因为git一般是用这个，这个也方便嘛，然后，将要执行的命令编写好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /c/Users/zxz/Desktop/test	#进入该文件</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;s&quot;	#这里的时间可以用一个变量代替</span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure>

<p>cmd中就可以像这样执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\git\Git\git-bash.exe -c &quot;cd /c/Users/zxz/Desktop/test &amp;&amp; git add . &amp;&amp; git commit -m &#x27;s&#x27; &amp;&amp; git push origin dev&quot;</span><br></pre></td></tr></table></figure>

<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/fpa0imix.4wl.png" alt="fpa0imix.4wl" style="zoom:33%;" />

<p>Quicker像这样还能做很多东西，比如说快速运行python代码，还有其他的自行探索</p>
<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/mwo20snb.s4s.png" alt="mwo20snb.s4s" style="zoom: 50%;" /> 

]]></content>
      <categories>
        <category>编程学习</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>quicker</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Waline评论系统个人服务器部署</title>
    <url>/2025/10/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Hexo%E5%8D%9A%E5%AE%A2/Waline%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="1、MySQL数据库部署"><a href="#1、MySQL数据库部署" class="headerlink" title="1、MySQL数据库部署"></a>1、MySQL数据库部署</h2><p>首先服务器配置好mysql数据库才行然后建立一个名为waline的数据库（注意使用utf8mb4编码），服务器对应端口要开放</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>输入密码，登录成功后，创建<code>waline</code>数据库并指定编码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS waline </span><br><span class="line">  DEFAULT CHARACTER SET utf8mb4 </span><br><span class="line">  DEFAULT COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>

<p>执行waline数据库的初始化脚本（官方也有的，这里直接贴出所有代码），将其保存file.sql并传到服务器，记住这个文件的位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;</span><br><span class="line">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;</span><br><span class="line">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;</span><br><span class="line">/*!40101 SET NAMES utf8 */;</span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;</span><br><span class="line">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */;</span><br><span class="line">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump of table wl_Comment</span><br><span class="line"># ------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">CREATE TABLE `wl_Comment` (</span><br><span class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_id` int(11) DEFAULT NULL,</span><br><span class="line">  `comment` text,</span><br><span class="line">  `insertedAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `ip` varchar(100) DEFAULT &#x27;&#x27;,</span><br><span class="line">  `link` varchar(255) DEFAULT NULL,</span><br><span class="line">  `mail` varchar(255) DEFAULT NULL,</span><br><span class="line">  `nick` varchar(255) DEFAULT NULL,</span><br><span class="line">  `pid` int(11) DEFAULT NULL,</span><br><span class="line">  `rid` int(11) DEFAULT NULL,</span><br><span class="line">  `sticky` boolean DEFAULT NULL,</span><br><span class="line">  `status` varchar(50) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `like` int(11) DEFAULT NULL,</span><br><span class="line">  `ua` text,</span><br><span class="line">  `url` varchar(255) DEFAULT NULL,</span><br><span class="line">  `createdAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `updatedAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump of table wl_Counter</span><br><span class="line"># ------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">CREATE TABLE `wl_Counter` (</span><br><span class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `time` int(11) DEFAULT NULL,</span><br><span class="line">  `reaction0` int(11) DEFAULT NULL,</span><br><span class="line">  `reaction1` int(11) DEFAULT NULL,</span><br><span class="line">  `reaction2` int(11) DEFAULT NULL,</span><br><span class="line">  `reaction3` int(11) DEFAULT NULL,</span><br><span class="line">  `reaction4` int(11) DEFAULT NULL,</span><br><span class="line">  `reaction5` int(11) DEFAULT NULL,</span><br><span class="line">  `reaction6` int(11) DEFAULT NULL,</span><br><span class="line">  `reaction7` int(11) DEFAULT NULL,</span><br><span class="line">  `reaction8` int(11) DEFAULT NULL,</span><br><span class="line">  `url` varchar(255) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `createdAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `updatedAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Dump of table wl_Users</span><br><span class="line"># ------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">CREATE TABLE `wl_Users` (</span><br><span class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `display_name` varchar(255) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `email` varchar(255) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `password` varchar(255) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `type` varchar(50) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">  `label` varchar(255) DEFAULT NULL,</span><br><span class="line">  `url` varchar(255) DEFAULT NULL,</span><br><span class="line">  `avatar` varchar(255) DEFAULT NULL,</span><br><span class="line">  `github` varchar(255) DEFAULT NULL,</span><br><span class="line">  `twitter` varchar(255) DEFAULT NULL,</span><br><span class="line">  `facebook` varchar(255) DEFAULT NULL,</span><br><span class="line">  `google` varchar(255) DEFAULT NULL,</span><br><span class="line">  `weibo` varchar(255) DEFAULT NULL,</span><br><span class="line">  `qq` varchar(255) DEFAULT NULL,</span><br><span class="line">  `2fa` varchar(32) DEFAULT NULL,</span><br><span class="line">  `createdAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `updatedAt` timestamp NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</span><br><span class="line">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;</span><br><span class="line">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;</span><br><span class="line">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</span><br><span class="line">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;</span><br><span class="line">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>终端中输入命令登录 MySQL，输入密码后进入 MySQL 交互界面（提示符为 <code>mysql&gt;</code>）。</li>
</ul>
<p>	</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u 用户名 -p</span><br></pre></td></tr></table></figure>

<ul>
<li>选择要操作的数据库，这里是waline</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 数据库名;		</span><br></pre></td></tr></table></figure>

<ul>
<li>执行 .sql 文件（注意路径需用绝对路径）：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source <span class="operator">/</span>path<span class="operator">/</span><span class="keyword">to</span><span class="operator">/</span>your<span class="operator">/</span>file.sql;</span><br></pre></td></tr></table></figure>

<ul>
<li>退出mysql</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit；</span><br></pre></td></tr></table></figure>



<h2 id="2、Docker部署"><a href="#2、Docker部署" class="headerlink" title="2、Docker部署"></a>2、Docker部署</h2><p>为了方便部署，这里使用了docker-compose部署，docker-compose.yml文件如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  waline:</span><br><span class="line">    container_name: waline</span><br><span class="line">    image: lizheming/waline:latest</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8360:8360</span><br><span class="line">    volumes:</span><br><span class="line">      - $&#123;PWD&#125;/data:/app/data</span><br><span class="line">    environment:</span><br><span class="line">      #数据库配置</span><br><span class="line">      MYSQL_HOST: &#x27;MySQL连接地址&#x27;	 </span><br><span class="line">      MYSQL_PORT: &#x27;端口号&#x27;			  </span><br><span class="line">      MYSQL_DB: &#x27;数据库&#x27;			  </span><br><span class="line">      MYSQL_USER: &#x27;root&#x27;		</span><br><span class="line">      MYSQL_PASSWORD: &#x27;密码&#x27;		   </span><br><span class="line">      MYSQL_PREFIX: &#x27;wl_&#x27;</span><br><span class="line">      MYSQL_CHARSET: &#x27;utf8mb4&#x27;</span><br><span class="line">      MYSQL_SSL: &#x27;false&#x27;</span><br><span class="line">      TZ: Asia/Shanghai</span><br><span class="line">      #改一下MySQL连接地址、端口号、数据库、密码就行了，当开启SSL是MYSQL_SSL: &#x27;false&#x27;这个要变，其他默认即可</span><br><span class="line">      </span><br><span class="line">      #邮箱配置，163为例</span><br><span class="line">      SMTP_SERVICE: &#x27;163&#x27;</span><br><span class="line">      AUTHOR_EMAIL: &#x27;邮箱地址&#x27;</span><br><span class="line">      SMTP_HOST: &#x27;smtp.163.com&#x27;</span><br><span class="line">      SMTP_PORT: &#x27;465&#x27;</span><br><span class="line">      SMTP_USER: &#x27;邮箱地址&#x27;</span><br><span class="line">      SMTP_PASS: &#x27;第三方授权登陆token&#x27;</span><br><span class="line">      SMTP_SECURE: &#x27;true&#x27;</span><br><span class="line">      #将邮箱地址替换为自己的，这里不是邮箱登录密码，而是需要在 163 邮箱中单独获取的 SMTP 授权码：登录 163 邮箱 → 进入「设置」→ 开启「POP3/SMTP/IMAP」服务按照提示完成验证（如短信验证），生成授权码后复制到这里，其他不变。</span><br><span class="line">      </span><br><span class="line">      # 站点与权限配置</span><br><span class="line">      SITE_URL: &#x27;https://zxzlimit.github.io&#x27;</span><br><span class="line">      SITE_NAME: &#x27;zxzlimit&#x27;</span><br><span class="line">      SENDER_NAME: &#x27;zxzlimit&#x27;</span><br><span class="line">      SECURE_DOMAINS: &#x27;zxzlimit.github.io&#x27;</span><br><span class="line">      LEVELS: &#x27;0,10,20,50,100,200&#x27;  # 50+ 为管理员权限</span><br><span class="line">      #SECURE_DOMAINS最好也把服务器的ip添加进去用英文逗号隔开放后面</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">      # 新增评论权限配置</span><br><span class="line">      ALLOW_ANONYMOUS: &#x27;true&#x27;       # 允许匿名发布</span><br><span class="line">      REVIEW: &#x27;false&#x27;               # 关闭审核，直接发布</span><br><span class="line">      AKISMET_KEY: &#x27;&#x27;               # 关闭反垃圾拦截（避免正常评论被误判）</span><br></pre></td></tr></table></figure>

<p>之后使用<code>docker-compose up </code>命令启动看看有没有报错，如果没有报错，使用<code>docker-compose up -d</code>命令后台启动即可。服务端启动成功之后访问 <a href="http://ip:8360/">http://ip:8360/</a> ，会看到默认的效果展示</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251015105303590.png" alt="image-20251015105303514"></p>
<p>然后先按 Ctrl+C 停止当前前台运行的服务，加 -d 参数，后台守护进程模式启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure>



<h2 id="3、配置到hexo-next的博客当中"><a href="#3、配置到hexo-next的博客当中" class="headerlink" title="3、配置到hexo-next的博客当中"></a>3、配置到hexo-next的博客当中</h2><p>因为waline不属于hexo-next的默认配置当中，所以还要在博客项目中下载一些插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @waline/hexo-next</span><br></pre></td></tr></table></figure>

<p>然后在next主题下的配置文件中，将waline的配置改一下 serverURL即可，因为http和htttps不互通，还需要将配置一下https</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">waline:</span><br><span class="line">  enable: true</span><br><span class="line">  serverURL: https://ip:8360/</span><br><span class="line">  pageview: true</span><br><span class="line">  pageSize: 10</span><br><span class="line">  meta: [&#x27;nick&#x27;, &#x27;mail&#x27;, &#x27;link&#x27;]</span><br><span class="line">  requiredMeta: []</span><br><span class="line">  locale:</span><br><span class="line">    placeholder: 欢迎留言~</span><br><span class="line">  emoji:</span><br><span class="line">    - https://unpkg.com/@waline/emojis@1.1.0/weibo</span><br><span class="line">    - https://unpkg.com/@waline/emojis@1.1.0/bilibili</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
        <tag>waline</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客网站部署到GitHub Pages</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Hexo%E5%8D%9A%E5%AE%A2/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0GitHub-Pages/</url>
    <content><![CDATA[<h2 id="一、注册GitHub账号"><a href="#一、注册GitHub账号" class="headerlink" title="一、注册GitHub账号"></a>一、注册GitHub账号</h2><p>后面要将我们的个人博客网站部署到GitHub Pages上，拥有一个GitHub账户自然就是最基本的前提了。</p>
<p>百度搜索“gitub”，搜索结果如下图所示：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/1.png" alt="img"></p>
<p>选择并点击“GitHub Build software better, together.”，或直接访问<a href="https://github.com/">https://github.com/</a><br>进入如下图所示界面：</p>
<p><img src="https://oceanwang.top/personal-website-7/2.png" alt="img"></p>
<ul>
<li>如果是第一次使用GitHub，点击“Sign up”进行注册；</li>
<li>如果以前使用过GitHub，点击“Sign in”登录即可。</li>
</ul>
<h2 id="二、创建部署目录仓库"><a href="#二、创建部署目录仓库" class="headerlink" title="二、创建部署目录仓库"></a>二、创建部署目录仓库</h2><p>按照官方说明的使用规则，如果使用GitHub Pages进行网站部署的话，所建仓库必须要取名为“GitHub用户名.github.io”。因为我的GitHub用户名为Napoleon940911，所以我的这个仓库应取名为“Napoleon940911.github.io”。</p>
<p>在GitHub官网（<a href="https://github.com/%EF%BC%89%E4%B8%8A%E6%88%90%E5%8A%9F%E7%99%BB%E5%BD%95%E5%90%8E%EF%BC%8C%E6%89%BE%E5%88%B0%E5%B9%B6%E7%82%B9%E5%87%BB%E7%BD%91%E9%A1%B5%E5%B7%A6%E4%B8%8A%E6%96%B9%E7%9A%84%E2%80%9CNew%E2%80%9D%EF%BC%9A">https://github.com/）上成功登录后，找到并点击网页左上方的“New”：</a></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/3.png" alt="img"></p>
<p>从而进入如下网页：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/4.png" alt="img"></p>
<p>依次：</p>
<ul>
<li>在上图所示的“Repository name”方框中填入仓库名称；</li>
<li>勾选“Add a README file”；</li>
<li>点击“Create repository”。<br>即可完成该仓库的创建（简单起见，其余所有内容均保持默认）。</li>
</ul>
<p>*<strong>注意：一定要勾选“Add a README file”，不然后面会看不到GitHub Pages的域名和部署分支*</strong></p>
<h2 id="三、访问GitHub-Pages"><a href="#三、访问GitHub-Pages" class="headerlink" title="三、访问GitHub Pages"></a>三、访问GitHub Pages</h2><p>该仓库创建成功后，会进入如下图所示网页：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/5.png" alt="img"></p>
<p>点击上图中的“Settings”，将所进入的网页滚轮移动至GitHub Pages相关的部分，如下图所示：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/6.png" alt="img"></p>
<p>从上图中可以看出，GitHub Pages给我们提供了一个格式为<a href="https://github用户名.github.io/">https://GitHub用户名.github.io</a> 的免费域名，并且相应的网站是从该仓库的 main 分支构建得到的。</p>
<p>我们直接点击上图中的这个域名，或是将这个域名（<a href="https://napoleon940911.github.io/%EF%BC%89%E8%BE%93%E5%85%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%B9%B6%E5%9B%9E%E8%BD%A6%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E7%9A%84%E7%95%8C%E9%9D%A2%EF%BC%9A">https://napoleon940911.github.io/）输入浏览器的地址栏并回车，可以看到如下图所示的界面：</a></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/7.png" alt="img"></p>
<p>如果你成功看到上图这样的界面，那么恭喜你已经拥有一个自己专属的网站了！！！</p>
<h2 id="四、设置部署仓库和分支"><a href="#四、设置部署仓库和分支" class="headerlink" title="四、设置部署仓库和分支"></a>四、设置部署仓库和分支</h2><p>回到我们前面创建的Hexo源码目录，用Notepad++或记事本等文本编辑工具打开根目录下面的 _config.yml 文件，并滚动到文件最后，可以看到如下图所示内容：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/8.png" alt="img"></p>
<p>将上图中这部分的内容更改为如下图所示：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/9.png" alt="img"></p>
<p>关于上图中“repo”内容的获取，如下图所示：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/10.png" alt="img"></p>
<p>依次点击上图中3个圈出的位置，即可将我们需要的信息添加到<strong>剪切板</strong> 里面，直接粘贴到前面提到的 _config.yml 文件中最后的**repo:**后面即可。</p>
<p>关于branch的填写，必须要和<a href="https://github.com/Napoleon940911/Napoleon940911.github.io/settings">https://github.com/Napoleon940911/Napoleon940911.github.io/settings</a> 中GitHub Pages部分指定的<strong>Branch</strong>保持一致。<br>保存_config.yml文件，并退出。</p>
<h2 id="五、生成静态网页文件"><a href="#五、生成静态网页文件" class="headerlink" title="五、生成静态网页文件"></a>五、生成静态网页文件</h2><p>在Git Bash窗口中输入如下指令并回车，将Hexo源码目录中已有的源码编译生成为静态网页文件：<br>hexo generate<br>该指令执行完成后，如下图所示：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/11.png" alt="img"></p>
<p>与此同时，可以看到Hexo源码目录中新增了一个名为db.json的文件，以及一个名为public的文件夹，如下图所示。</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/12.png" alt="img"></p>
<ul>
<li>db.json文件：编译过程中产生的中间文件，不用关心；</li>
<li>public文件夹：新生成的静态网页文件就存放在这个目录下。</li>
</ul>
<p>点进public文件夹可以看到：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/13.png" alt="img"></p>
<p>这些就是刚刚编译生成的静态网页文件。</p>
<h2 id="六、部署到GitHub-Pages上"><a href="#六、部署到GitHub-Pages上" class="headerlink" title="六、部署到GitHub Pages上"></a>六、部署到GitHub Pages上</h2><p>在Git Bash窗口中输入如下指令并回车，将刚刚新生产的静态网页文件推送到GitHub Pages：<br>hexo deploy<br>该指令执行完成后，如下图所示：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/14.png" alt="img"></p>
<p>上图中最后一行提示 Deploy done，意味着我们部署成功了！</p>
<h2 id="七、再次访问GitHub-Pages"><a href="#七、再次访问GitHub-Pages" class="headerlink" title="七、再次访问GitHub Pages"></a>七、再次访问GitHub Pages</h2><p>这时，我们再去访问我们前面得到的 GitHub Pages（<a href="https://napoleon940911.github.io/%EF%BC%89">https://napoleon940911.github.io/）</a> 。会发现原来几乎空白的网页，已经变成了前面我们在本地通过 <a href="http://localhost:4000/">http://localhost:4000</a> 所访问到的网页了！如下图所示：</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/15.png" alt="img"></p>
<p>如果测试发现 GitHub Pages 还是没有任何变化，不要着急，等几分钟之后再次刷新即可。</p>
<p>至此，我们就已经成功将本地的 Hexo 仓库部署到 GitHub 上了。</p>
<p><strong>更新</strong></p>
<p>最好设置两个分支，一个管理代码，一个展示网页</p>
<p>代码管理就是和平时的git一样，将写好的代码上传到git进行备份</p>
<p>网页展示的则进入本地项目的文件夹里，通过命令，直接推送过去了，其他不用管了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>编程学习</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>博客NexT主题美化设置</title>
    <url>/2025/02/16/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Hexo%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>在网站根目录下输入以下命令</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>这样在当前目录下的themes文件夹中就有了Next主题</p>
<blockquote>
<p>我们将站点根目录下的 <code>_config.yml</code>文件称为 <code>站点配置文件</code> , 将 <code>themes/next</code> 文件夹内的 <code>_config.yml</code> 文件称为主题配置文件 。</p>
</blockquote>
<h2 id="1、启用主题"><a href="#1、启用主题" class="headerlink" title="1、启用主题"></a>1、启用主题</h2><p>打开<code>站点配置文件</code> ，找到 <code>theme</code> ，建议用 <code>ctrl+f</code> 搜索<code>theme</code> 快速定位，修改为</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h2 id="2、选择主题风格"><a href="#2、选择主题风格" class="headerlink" title="2、选择主题风格"></a>2、选择主题风格</h2><p>打开 <code>主题配置文件</code> ，找到 <code>Scheme Settings</code> ，<code>Next</code>主题提供四种风格，分别为 <code>Muse</code> , <code>Mist</code> , <code>Pisces</code> , <code>Gemini</code> , 使用时只需将想启用的风格前面的 <code>#</code> 删除即可，我使用的是 <code>Gemini</code> 风格的</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<h2 id="3、菜单设置"><a href="#3、菜单设置" class="headerlink" title="3、菜单设置"></a>3、菜单设置</h2><blockquote>
<p>菜单包括：首页、归档、分类、标签、关于等等</p>
</blockquote>
<p>刚开始的时候默认只有首页和归档两个，可以根据需要添加相应的菜单，打开 <code>主题配置文件</code> ，找到 <code>Menu Settings</code> , 一下为我的设置</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class="line"># Usage: `Key: /link/ || icon`</span><br><span class="line"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span><br><span class="line"># Value before `||` delimeter is the target link.</span><br><span class="line"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.</span><br><span class="line"># External url should start with http:// or https://</span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>

<h3 id="添加分类模块"><a href="#添加分类模块" class="headerlink" title="添加分类模块"></a>添加分类模块</h3><ul>
<li><p>新建一个分类页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 <code>source/categories/index.md</code> 文件中的 <code>type</code> 修改为 <code>type: &quot;categories&quot;</code></p>
</li>
<li><p>在菜单设置中将 <code>categories</code>取消注释</p>
</li>
<li><p>打开 <code>scaffolds/post.md</code> 文件，在后面增加 <code>categories:</code></p>
</li>
<li><p>之后的每一篇文章会自动创建 <code>categories:</code> ,后面输入分类名即可</p>
</li>
</ul>
<h3 id="添加标签模块"><a href="#添加标签模块" class="headerlink" title="添加标签模块"></a>添加标签模块</h3><ul>
<li><p>新建一个分类页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 <code>source/tags/index.md</code> 文件中的 <code>type</code> 修改为 <code>type: &quot;tags&quot;</code></p>
</li>
<li><p>在菜单设置中将 <code>tags</code>取消注释</p>
</li>
<li><p>打开 <code>scaffolds/post.md</code> 文件，在后面增加 <code>tags:</code></p>
</li>
<li><p>之后的每一篇文章会自动创建 <code>tags:</code> ，后面输入标签名即可，多个标签按如下格式输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tags:</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="添加关于模块"><a href="#添加关于模块" class="headerlink" title="添加关于模块"></a>添加关于模块</h3><ul>
<li><p>新建一个分类页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>source/about/index.md</code> 文件的内容为关于的内容即可</p>
</li>
<li><p>在菜单设置中将 <code>about</code>取消注释</p>
</li>
</ul>
<h3 id="添加搜索模块"><a href="#添加搜索模块" class="headerlink" title="添加搜索模块"></a>添加搜索模块</h3><ul>
<li><p>安装 <code>hexo-generator-searchdb</code> 插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开 <code>站点配置文件</code> ，在最后添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开 <code>主题配置文件</code>, 找到 <code>local_search</code> ,将 <code>enable</code> 修改为 <code>true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="修改个人社交信息"><a href="#修改个人社交信息" class="headerlink" title="修改个人社交信息"></a>修改个人社交信息</h3><ul>
<li><p>在 <code>主题配置文件</code> 中搜索 <code>social</code> ，选择想展示的社交信息，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/ShangguanHong || github</span><br><span class="line">  E-Mail: mailto:sgh1450280694@gmail.com || envelope</span><br><span class="line">  Weibo: https://weibo.com/5590338381 || weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、网站动画效果"><a href="#4、网站动画效果" class="headerlink" title="4、网站动画效果"></a>4、网站动画效果</h2><ul>
<li><p>使用canvas_nest</p>
<p>在 <code>theme/next</code>目录下执行 <code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code> 命令，将 <code>主题配置文件</code> 中的<code>canvas_nest: false</code> 改为 <code>canvas_nest: true</code></p>
</li>
<li><p>使用three_waves</p>
<p>在 <code>theme/next</code>目录下执行 <code>git clone https://github.com/theme-next/theme-next-three source/lib/three_waves</code> 命令，将 <code>主题配置文件</code> 中的<code>three_waves: false</code> 改为 <code>three_waves: true</code></p>
</li>
<li><p>使用canvas_lines</p>
<p>将 <code>主题配置文件</code> 中的<code>canvas_lines: false</code> 改为 <code>canvas_lines: true</code></p>
</li>
<li><p>使用canvas_sphere</p>
<p>将 <code>主题配置文件</code> 中的<code>canvas_sphere: false</code> 改为 <code>canvas_sphere: true</code></p>
</li>
</ul>
<h2 id="5、文章字数统计与阅读时间"><a href="#5、文章字数统计与阅读时间" class="headerlink" title="5、文章字数统计与阅读时间"></a>5、文章字数统计与阅读时间</h2><ul>
<li><p>在网站根目录下运行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>站点配置文件</code> ，添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">symbols: true</span><br><span class="line">time: true</span><br><span class="line">total_symbols: true</span><br><span class="line">total_time: true</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>主题配置文件</code> ，找到 <code>symbols_count_time</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: false</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="6、安装博客评论功能utterances"><a href="#6、安装博客评论功能utterances" class="headerlink" title="6、安装博客评论功能utterances"></a>6、安装博客评论功能utterances</h2><p>对于github上来说，先创建一个公共的库</p>
<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/sctd2u1k.dw2.png" alt="sctd2u1k.dw2" style="zoom:33%;" /> 

<p>然后安装GitHub App utterances（<a href="https://github.com/apps/utterances%EF%BC%89">https://github.com/apps/utterances）</a></p>
<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/eefao34w.kza.png" alt="eefao34w.kza" style="zoom:25%;" /> 

<p>  选择关联的仓库，我们选择刚刚建好的仓库；</p>
<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/f1gk34ui.nhb.png" alt="f1gk34ui.nhb" style="zoom:25%;" /> 

<p>在主题配置中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Utterances</span><br><span class="line"># For more information: https://utteranc.es</span><br><span class="line">utterances:</span><br><span class="line">  enable: true</span><br><span class="line">  repo: zxzlimit/comment # Github repository owner and name</span><br><span class="line">  # Available values: pathname | url | title | og:title</span><br><span class="line">  issue_term: pathname</span><br><span class="line">  # Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span><br><span class="line">  theme: github-light</span><br></pre></td></tr></table></figure>

<p>在站点配置中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: http://localhost:4000/ 	#改为自己的网站url</span><br></pre></td></tr></table></figure>

<p>在其他页面也有评论框怎么办，在该页面下添加comments: false</p>
<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/nfinoie1.gfx.png" alt="nfinoie1.gfx" style="zoom:33%;" /> 

<h2 id="7、代码块的设置"><a href="#7、代码块的设置" class="headerlink" title="7、代码块的设置"></a>7、代码块的设置</h2><p>在next主题下的设置文件中_config.yml，进行代码块的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Code Highlight theme</span><br><span class="line">  # All available themes: https://theme-next.js.org/highlight/</span><br><span class="line">  theme:</span><br><span class="line">    light: default  # Light mode的代码高亮主题，选择了&quot;default&quot;</span><br><span class="line">    dark: stackoverflow-dark  # Dark mode的代码高亮主题，选择了&quot;stackoverflow-dark&quot;</span><br><span class="line">  prism:</span><br><span class="line">    light: prism  # Light mode的Prism.js主题，选择了&quot;prism&quot;</span><br><span class="line">    dark: prism-dark  # Dark mode的Prism.js主题，选择了&quot;prism-dark&quot;</span><br><span class="line">  </span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: false  # 是否启用代码块的复制按钮</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: default  # 设置复制按钮的样式，可选default, flat, mac等 开启mac代码块</span><br><span class="line"></span><br><span class="line">  # Fold code block</span><br><span class="line">  fold:</span><br><span class="line">    enable: false  # 是否启用折叠代码块功能</span><br><span class="line">    height: 500  # 设定代码折叠的默认高度，超过这个高度的代码块会自动折叠</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其他微调在网页内自己调，然后在vscode中搜索更改，一点一点摸索</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/biuesq4z.d3l.png" alt="biuesq4z.d3l"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/oracds20.wey.png" alt="oracds20.wey"></p>
<h2 id="8、添加图片放大预览功能"><a href="#8、添加图片放大预览功能" class="headerlink" title="8、添加图片放大预览功能"></a>8、添加图片放大预览功能</h2><p>利用 Fancybox 能放大查看图片。</p>
<p>有 <a href="https://github.com/theme-next/theme-next-fancybox">Fancybox2</a> 和 <a href="https://github.com/theme-next/theme-next-fancybox3">Fancybox3</a> 两个版本，这里使用 Fancybox3。</p>
<p>如果已经有 fancybox2 的，需要在站点根目录下执行下列命令进行删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf themes/next/source/lib/fancybox</span><br></pre></td></tr></table></figure>

<p>进入到 <code>themes/next</code> 主题目录下，执行以下命令安装 fancybox3 模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox</span><br></pre></td></tr></table></figure>

<p>编辑 <code>主题配置文件</code>，启用 fancybox，修改配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure>

<h2 id="9、设置侧栏阅读进度百分比"><a href="#9、设置侧栏阅读进度百分比" class="headerlink" title="9、设置侧栏阅读进度百分比"></a>9、设置侧栏阅读进度百分比</h2><p>编辑 <code>站点配置文件</code>，修改 <code>back2top</code> 部分如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: true</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn.jsdelivr.net/gh/wylu/img/ac3db59f21c3bbf42b7a6dbfef8ab20e.png"><img src="https://cdn.jsdelivr.net/gh/wylu/img/ac3db59f21c3bbf42b7a6dbfef8ab20e.png" alt="sidebar-reading-progress"></a></p>
<h2 id="10、设置顶部阅读进度条"><a href="#10、设置顶部阅读进度条" class="headerlink" title="10、设置顶部阅读进度条"></a>10、设置顶部阅读进度条</h2><p>进入到 NexT 主题目录下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd themes/next</span><br></pre></td></tr></table></figure>


<p>安装模块到 source&#x2F;lib 目录下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress</span><br></pre></td></tr></table></figure>


<p>编辑 <code>主题配置文件</code>，启用 <code>reading_progress</code> 模块，如下：</p>
<p><strong>注意：不是<code>vendors:</code>下的<code>reading_progress</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Reading progress bar</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-reading-progress</span><br><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &quot;#37c6c0&quot;</span><br><span class="line">  height: 2px</span><br></pre></td></tr></table></figure>

<h2 id="11、设置左上角或右上角-github-图标"><a href="#11、设置左上角或右上角-github-图标" class="headerlink" title="11、设置左上角或右上角 github 图标"></a>11、设置左上角或右上角 github 图标</h2><h3 id="开启默认设置"><a href="#开启默认设置" class="headerlink" title="开启默认设置"></a>开启默认设置</h3><p>NexT 支持通过配置开启右上角 github 图标，编辑 <code>主题配置文件</code>，启用 github-banner 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># `Follow me on GitHub` banner in the top-right corner.</span><br><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  # 点击即跳转到该链接，自行设定</span><br><span class="line">  permalink: https://github.com/yourname</span><br><span class="line">  # 当鼠标悬浮于上方时显示的文本</span><br><span class="line">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="https://cdn.jsdelivr.net/gh/wylu/img/083b63ce1740296767946e649baaf23c.png"><img src="https://cdn.jsdelivr.net/gh/wylu/img/083b63ce1740296767946e649baaf23c.png" alt="github-banner"></a></p>
<h3 id="进阶自定义设置"><a href="#进阶自定义设置" class="headerlink" title="进阶自定义设置"></a>进阶自定义设置</h3><p>自定义配置使其可以使用 <a href="https://github.blog/2008-12-19-github-ribbons/">GitHub Ribbons</a> 和 <a href="http://tholman.com/github-corners/">GitHub Corners</a> 中的任何一款图标。</p>
<p>修改 <code>/themes/next/layout/_partials/github-banners.swig</code> 文件内容如下：</p>
<p><a href="https://github.com/wylu/cdn/blob/master/next/swig/github-banner.swig">github-banner.swig</a></p>
<p>同时编辑 <code>站点配置文件</code>，修改 <code>github_banner</code> 部分如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># `Follow me on GitHub` banner in the top-left or top-right corner.</span><br><span class="line"># `Fork me on GitHub` banner in the top-left or top-right corner.</span><br><span class="line">github_banner:</span><br><span class="line">  enable: true</span><br><span class="line">  permalink: https://github.com/wylu</span><br><span class="line">  title: Follow me on GitHub</span><br><span class="line">  # Available values of ribbons:</span><br><span class="line">  # See: https://github.blog/2008-12-19-github-ribbons/</span><br><span class="line">  # ribbons-left-red | ribbons-left-green | ribbons-left-darkblue</span><br><span class="line">  # ribbons-left-orange | ribbons-left-gray | ribbons-left-white</span><br><span class="line">  # ribbons-right-red | ribbons-right-green | ribbons-right-darkblue</span><br><span class="line">  # ribbons-right-orange | ribbons-right-gray | ribbons-right-white</span><br><span class="line">  # Available values of corners:</span><br><span class="line">  # See: http://tholman.com/github-corners/</span><br><span class="line">  # corners-right-black | corners-right-green | corners-right-red</span><br><span class="line">  # corners-right-blue | corners-right-white</span><br><span class="line">  # corners-left-black | corners-left-green | corners-left-red</span><br><span class="line">  # corners-left-blue | corners-left-white</span><br><span class="line">  # If not set, it will use NexT default style.</span><br><span class="line">  type:</span><br><span class="line">  # You can set size of banner.</span><br><span class="line">  # Default values for ribbons: width = height = 120</span><br><span class="line">  # Default values for corners: width = height = 80</span><br><span class="line">  size:</span><br><span class="line">  # whether to display on the mobile side.</span><br><span class="line">  # If use left banner, you should better set it &quot;false&quot; as the banner will cover menu button.</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure>

<p>这样你就可以通过 <code>type</code> 随意切换 banner 的样式了。</p>
<h2 id="12、解决文章目录自带编号问题"><a href="#12、解决文章目录自带编号问题" class="headerlink" title="12、解决文章目录自带编号问题"></a>12、解决文章目录自带编号问题</h2><p>首先打开配置文件<br>找到博客根目录，右键打开菜单，点击“Git Bash Here”，博主博客路径为“&#x2F;e&#x2F;hexo&#x2F;Blog”,输入以下命令，注意“next”为博主使用的主题名称，请根据自己的主题修改，可在“themes”目录下查看。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim themes/next/_config.yml</span><br></pre></td></tr></table></figure>

<p>修改配置文件<br>找到“toc”功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: true                # 启用目录（TOC）</span><br><span class="line">  number: true                # 自动给目录中的条目添加编号</span><br><span class="line">  wrap: false                 # 如果为 true，标题过长时会换行显示（超出侧边栏宽度时）</span><br><span class="line">  expand_all: false           # 如果为 true，目录将显示所有级别的内容，否则只显示当前级别</span><br><span class="line">  max_depth: 6                # 生成目录时，最大支持的标题深度</span><br></pre></td></tr></table></figure>

<p>执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<p>“hexo clean”清除缓存文件</p>
<p>“hexo g” 是 “hexo generate” 的缩写，生成静态文件</p>
<p>“hexo s” 是 “hexo server” 的缩写，启动本地服务，用于预览主题</p>
<h2 id="13、关闭自带动画，提升效率"><a href="#13、关闭自带动画，提升效率" class="headerlink" title="13、关闭自带动画，提升效率"></a>13、关闭自带动画，提升效率</h2><p>在next主题下搜索motion，将其改为false即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Animation Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Use Animate.css to animate everything.</span><br><span class="line"># For more information: https://animate.style</span><br><span class="line">motion:</span><br><span class="line">  enable: false</span><br><span class="line">  async: false</span><br><span class="line">  duration: 200</span><br><span class="line">  transition:</span><br><span class="line">    # All available transition variants: https://theme-next.js.org/animate/</span><br><span class="line">    menu_item: fadeInDown</span><br><span class="line">    post_block: fadeIn</span><br><span class="line">    post_header: fadeInDown</span><br><span class="line">    post_body: fadeInDown</span><br><span class="line">    coll_header: fadeInLeft</span><br><span class="line">    # Only for Pisces | Gemini.</span><br><span class="line">    sidebar: fadeInUp</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>更多设置参考<a href="https://www.wylu.me/posts/e0424f3f/#%E6%B7%BB%E5%8A%A0%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C">https://www.wylu.me/posts/e0424f3f/#%E6%B7%BB%E5%8A%A0%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C</a></p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>博客访客数量和访问量的设置-busuanzi</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Hexo%E5%8D%9A%E5%AE%A2/%E5%8D%9A%E5%AE%A2%E8%AE%BF%E5%AE%A2%E6%95%B0%E9%87%8F%E5%92%8C%E8%AE%BF%E9%97%AE%E9%87%8F%E7%9A%84%E8%AE%BE%E7%BD%AE-busuanzi/</url>
    <content><![CDATA[<p>1、在next主题配置中打开busuanzi的配置，即C:\Users\zxz\OneDrive\Desktop\zxzlimit.github.io-dev\themes\next_config.yml当中，搜索定位到busuanzi处，然后改为以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Show Views / Visitors of the website / page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true                          # 启用不蒜子</span><br><span class="line">  total_visitors: true                  # 网站总访客数</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: true                     # 网站总浏览数</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true                      # 文章浏览数</span><br><span class="line">  post_views_icon: fa fa-eye</span><br></pre></td></tr></table></figure>

<p>2、这样配置好了应该会出现数据，但位置错乱，如下图</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250805165323302.png" alt="image-20250804202133147"></p>
<p>将themes\next\layout_third-party\statistics\busuanzi-counter.njk文件的内容复制到themes\next\layout_partials\footer.njk下面，好看一些，不然会显示得很奇怪而且不好调整，同时删除busuanzi-counter.njk文件内容。也就是以下内容，直接放在footer.njk最后面就行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;# ===== busuanzi统计===== #&#125;</span><br><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line">&lt;div class=&quot;busuanzi-count&quot;&gt;</span><br><span class="line">  &lt;script&#123;&#123; pjax &#125;&#125; async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% if theme.busuanzi_count.total_visitors %&#125;</span><br><span class="line">    &lt;span  id=&quot;busuanzi_container_site_uv&quot; style=&quot;display: none;&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;site-uv&quot; title=&quot;&#123;&#123; __(&#x27;footer.total_visitors&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% if theme.busuanzi_count.total_visitors and theme.busuanzi_count.total_views %&#125;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot; style=&quot;margin: 0 0.5em;&quot;&gt;|&lt;/span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;% if theme.busuanzi_count.total_views %&#125;</span><br><span class="line">    &lt;span  id=&quot;busuanzi_container_site_pv&quot; style=&quot;display: none;&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;site-pv&quot; title=&quot;&#123;&#123; __(&#x27;footer.total_views&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250805165355530.png" alt="image-20250805165355385"></p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>busuanzi</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu虚拟机扩容</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Ubuntu%E9%85%8D%E7%BD%AE/%E8%99%9A%E6%8B%9F%E6%9C%BAubuntu%E6%89%A9%E5%AE%B9/</url>
    <content><![CDATA[<p>在虚拟机上完成扩容后还需要分配才行的</p>
<p>查看储存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df</span><br><span class="line">df -h	以人类的方式查看</span><br></pre></td></tr></table></figure>



<p>1、先安装磁盘软件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install gparted</span><br></pre></td></tr></table></figure>

<p>2、我们要扩容的一般为</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240516135458976.png" alt="image-20240516135458976"></p>
<p>但现在不能对其进行操作的</p>
<p>3、先挂载一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mount -o remount -rw /</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mount -o remount -rw /  /var/snap/firefox/common/host-hunspell</span><br></pre></td></tr></table></figure>

<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240516135631573.png" alt="image-20240516135631573"></p>
<p>详情里面查看地址</p>
<p>4、然后对其进行扩容，并执行保存</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240516135718963.png" alt="image-20240516135718963"></p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>Ubuntu配置</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下安装anconda</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/linux%E4%B8%8B%E5%AE%89%E8%A3%85anconda/</url>
    <content><![CDATA[<p>运行命令直接安装，这就不说了。关键是安装后的文件配置</p>
<p>这个centos的</p>
<p>还vim好用</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20240516095108.png" alt="QQ截图20240516095108"></p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>anconda</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的配置</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/mysql%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>1.首先检测下系统是否自带安装MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>

<p>2.如果你系统有安装，那可以选择进行卸载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e mysql　　// 普通删除模式</span><br><span class="line">rpm -e --nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件</span><br></pre></td></tr></table></figure>

<p>3.安装MySQL,可以mkdir mysql 新建一个文件夹用于存放mysql 相关文件。 分别输入如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum update</span><br><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure>

<p>4.权限设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown mysql:mysql -R /var/lib/mysql</span><br></pre></td></tr></table></figure>

<p>5.初始化MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></table></figure>

<p>6.启动MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>

<p>7.查看MySQL 运行状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<p>8.验证MySQL安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@host]# mysqladmin --version</span><br></pre></td></tr></table></figure>

<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20181225104601204.png" alt="image"></p>
<p>9.查看默认密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>只要能先登录进去就可以不用管这个了</p>
<p>10.修改密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;admin&#x27;;</span><br></pre></td></tr></table></figure>

<p>11.Mysql安装成功后，默认的root用户密码为空，你可以使用以下命令来创建root用户的密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@host]# mysqladmin -u root password &quot;new_password&quot;;</span><br></pre></td></tr></table></figure>

<p>12.现在你可以通过以下命令来连接到Mysql服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">• 1</span><br></pre></td></tr></table></figure>





<p>CTRL+D 退出mysql</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>xshell的配置</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/xshell%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>打开文件管理器，方便查看<br><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240519104032641.png" alt="image-20240519104032641"></p>
<p>文件的传输功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装完成好使用命令rpm -qa lrzsz查看是否安装</span><br></pre></td></tr></table></figure>

<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240519104120039.png" alt="image-20240519104120039"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240519104328618.png" alt="image-20240519104328618"></p>
<h3 id="输入命令，并选择文件（建议将文件先压缩，因为一次只能选择一个文件）"><a href="#输入命令，并选择文件（建议将文件先压缩，因为一次只能选择一个文件）" class="headerlink" title="输入命令，并选择文件（建议将文件先压缩，因为一次只能选择一个文件）"></a>输入命令，并选择文件（建议将文件先压缩，因为一次只能选择一个文件）</h3><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240519104343366.png" alt="image-20240519104343366"></p>
<h3 id="等待文件进行传输，传输成功后可在根目录进行查看"><a href="#等待文件进行传输，传输成功后可在根目录进行查看" class="headerlink" title="等待文件进行传输，传输成功后可在根目录进行查看"></a>等待文件进行传输，传输成功后可在根目录进行查看</h3><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240519104421683.png" alt="image-20240519104421683"></p>
<p>服务器文件解压和压缩</p>
<p>压缩： 命令格式：tar -zcvf  压缩文件名.tar.gz  被压缩文件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如	tar -czvf ddd.tar.gz ddd</span><br></pre></td></tr></table></figure>

<p>解压：命令格式：tar -zxvf  压缩文件名.tar.g            tar -zvxf 解压文件名 -C 要解压的路径</p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>zip格式（这个才是常用的）</p>
<p>先下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install unzip</span><br></pre></td></tr></table></figure>



<p>使用 <code>zip</code> 命令将目录压缩成 ZIP 文件。假设你要将 <code>ddd</code> 目录压缩为 <code>ddd.zip</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip -r ddd.zip ddd</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-r</code>：递归地将目录及其内容添加到 ZIP 文件中。</li>
</ul>
<p>解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip ddd.zip</span><br></pre></td></tr></table></figure>



<p>文件重命名</p>
<p><strong>将文件 <code>file1.txt</code> 重命名为 <code>newfile.txt</code></strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv file1.txt newfile.txt</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>xshell</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh远程连接</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>一般来说是使用账号密码登录的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@8.134.186.40</span><br><span class="line">root为用户名</span><br><span class="line">@后面接ip</span><br><span class="line"></span><br><span class="line">然后会要求输入密码。</span><br></pre></td></tr></table></figure>



<p>现在用ssh的方式不用在输入密码了，这个其实和以前的ssh远程仓库一样的</p>
<p>首先生成密钥，参考之前的ssh远程仓库，不同的一点是</p>
<p>在远程服务器创建的.ssh文件下创建一个文件，里面保存公钥即可（注意是在远程服务器的哈）这里涉及vim编辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@iZ7xv5l9nyp6ssokyrj5uxZ ~]# cd .ssh</span><br><span class="line">[root@iZ7xv5l9nyp6ssokyrj5uxZ .ssh]# touch authorized_keys</span><br><span class="line">[root@iZ7xv5l9nyp6ssokyrj5uxZ .ssh]# ls</span><br><span class="line">authorized_keys </span><br><span class="line">[root@iZ7xv5l9nyp6ssokyrj5uxZ .ssh]# vim authorized_keys</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>ssh连接</tag>
      </tags>
  </entry>
  <entry>
    <title>域名，ssl证书配置</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/%E5%9F%9F%E5%90%8D%EF%BC%8Cssl%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>有了一个服务器还需要给它一个域名，像www.什么什么，把解析过来</p>
<p>要花钱买一个域名，还要实名认证</p>
<p>先去域名列表里面看看</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240520112350359.png" alt="image-20240520112350359"></p>
<p>在到DNS云解析看看</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240520112453322.png" alt="image-20240520112453322"></p>
<p>然后就是添加两个解析</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240520112520227.png" alt="image-20240520112520227"></p>
<p>完成后，ping一下看能不能成。</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240520112548608.png" alt="image-20240520112548608"></p>
<p>有回复就说明成立。</p>
<p>或者在宝塔面板下查看</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240520113033605.png" alt="image-20240520113033605"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240520113105359.png" alt="image-20240520113105359"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240520112843784.png" alt="image-20240520112843784"></p>
<p>然后再到ssl里面申请验证，等待证书验证通过。</p>
<p><strong><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240520112643143.png" alt="image-20240520112643143"></strong></p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>ssl证书</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔的mysql连接</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/%E5%AE%9D%E5%A1%94%E7%9A%84mysql%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>1、端口开发</p>
<p>云服务器开发3306端口</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240512203518515.png" alt="image-20240512203518515"></p>
<p>宝塔面板开发3306端口</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240512203623689.png" alt="image-20240512203623689"></p>
<p>2、访问权限的设置</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240512203730701.png" alt="image-20240512203730701"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240512203803143.png" alt="image-20240512203803143"></p>
<p>还是分为服务器和宝塔面板</p>
<p>3、数据库的访问权限设置</p>
<p>这个直接在终端进行操作吧</p>
<p>终端进入数据库的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u 用户名 -p</span><br><span class="line"></span><br><span class="line">如果是root用户的话直接</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 选择你要操作的数据库</span><br><span class="line">use mysql；</span><br><span class="line"></span><br><span class="line">-- 给root账户授权（root默认只有本机访问的权限，要通过其他机器访问，必须授权）</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO&#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;root&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">-- 最后刷新数据库服务</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">请注意，授予 root 用户在所有数据库的所有表上执行任何操作的权限可能会造成安全风险。建议仅在</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>宝塔</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器使用v2raya来实现科学上网（无UI）</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8v2raya%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%88%E6%97%A0UI%EF%BC%89/</url>
    <content><![CDATA[<p>使用v2raya对v2ray核心进行管理，实现在本地电脑配置服务器的代理</p>
<p>1、安装v2raya</p>
<p>在<a href="https://github.com/v2rayA/v2rayA/releases%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%8C%E5%B0%86%E5%85%B6%E4%BC%A0%E5%85%A5%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8C%E9%9D%A2">https://github.com/v2rayA/v2rayA/releases下载对应的安装包，将其传入到服务器里面</a></p>
<p>在通过进行安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install /path/download/installer_debian_xxx_vxxx.deb ### 自行替换 deb 包所在的实际路径</span><br></pre></td></tr></table></figure>

<p>启动v2raya</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start v2raya</span><br></pre></td></tr></table></figure>

<p>查看运行状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status v2raya</span><br></pre></td></tr></table></figure>

<p>配置v2raya的.config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/v2raya/config.json</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;api&quot;: &#123;</span><br><span class="line">    &quot;enabled&quot;: true,</span><br><span class="line">    &quot;listen&quot;: &quot;0.0.0.0&quot;,   // 设置为 0.0.0.0 以便通过外部访问</span><br><span class="line">    &quot;port&quot;: 2017,           // 默认端口是 2017，如果需要，可以改成其他端口</span><br><span class="line">    &quot;auth&quot;: &#123;</span><br><span class="line">      &quot;user&quot;: &quot;admin&quot;,      // 设置用户名</span><br><span class="line">      &quot;password&quot;: &quot;your_password&quot;  // 设置密码</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、安装v2ray和相关配置</p>
<p>参考网址<a href="https://github.com/v2fly/fhs-install-v2ray?tab=readme-ov-file">https://github.com/v2fly/fhs-install-v2ray?tab=readme-ov-file</a></p>
<p><strong>安装unzip后面解压要用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install unzip</span><br></pre></td></tr></table></figure>

<p><strong>安裝和更新 V2Ray</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</span><br><span class="line"></span><br><span class="line">sudo systemctl start v2ray   # 启动</span><br><span class="line"></span><br><span class="line">sudo systemctl status v2ray   #查看状态</span><br></pre></td></tr></table></figure>

<p><strong>安裝最新發行的 geoip.dat 和 geosite.dat</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh)</span><br></pre></td></tr></table></figure>

<p>3、去浏览器输入对应网址进行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://&lt;your-server-ip&gt;:2017</span><br></pre></td></tr></table></figure>

<p>设置里面这么在保存一下</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/r0xqu5lg.vls.png" alt="r0xqu5lg.vls"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/bngo51a0.0rb.png" alt="bngo51a0.0rb"></p>
<p>4、检查是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -I https://www.google.com</span><br></pre></td></tr></table></figure>

<p>很快能进行结果返回即代表成功</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>server</tag>
        <tag>v2raya</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器已部署服务清单</title>
    <url>/2025/10/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B7%B2%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<p>记录一下我服务器目前部署过的东西</p>
<p>1、redis</p>
<p>临时数据存储的</p>
<p>2、SyncClipboard</p>
<p>云端剪贴板一类的，用的docker部署	端口：5133</p>
<p>3、NginxProxyManager</p>
<p>给服务器实现域名和ip的绑定，还有ssl证书的配置	端口：81</p>
<p>4、v2raya</p>
<p>实现服务器的科学上网：</p>
<p>5、umami</p>
<p>类适于百度统计这些一样，都是分析后台访问数据的	端口：3000</p>
<p>6、cobaltstrike</p>
<p>服务端，用于钓鱼的，但一般不用</p>
<p>7、frp</p>
<p>内网穿透的，将自己的电脑的东西通过外网的一接口接入外网</p>
<p>8、waline</p>
<p>博客评论系统</p>
<p>9、mysql</p>
<p>数据库</p>
<p>​	</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器配置SyncClipboard</title>
    <url>/2025/02/26/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AESyncClipboard/</url>
    <content><![CDATA[<p>1、创建安装目录<br>创建一下安装的目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line">mkdir -p /root/data/docker_data/syncclipboard</span><br><span class="line"></span><br><span class="line">cd /root/data/docker_data/syncclipboard</span><br></pre></td></tr></table></figure>

<p>2、接着我们来编辑下docker-compose.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编辑配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  syncclipboard-server:</span><br><span class="line">    image: jericx/syncclipboard-server:latest</span><br><span class="line">    container_name: syncclipboard-server</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5133:5033&quot; # 左边的5133可以改成服务器上没有用过的其他端口</span><br><span class="line">    environment:</span><br><span class="line">      - SYNCCLIPBOARD_USERNAME=这里改成你的英文的用户名</span><br><span class="line">      - SYNCCLIPBOARD_PASSWORD=这个改成你的密码</span><br><span class="line"> </span><br><span class="line"> #其中的5133可以改成服务器上没有用过的端口，记得修改自己的用户名和密码，修改完成之后，可以在英文输入法下，按 i 修改，完成之后，按一下 esc，然后 :wq 保存退出。</span><br></pre></td></tr></table></figure>

<p>3、查看端口是否被占用<br>查看端口是否被占用（以 5133 为例），输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -i:5133  #查看 5133 端口是否被占用，如果被占用，重新自定义一个端口</span><br></pre></td></tr></table></figure>

<p>4、启动 syncclipboard</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/data/docker_data/syncclipboard</span><br><span class="line"></span><br><span class="line">docker compose up -d   # 注意，老版本用户用 docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>SyncClipboard</tag>
      </tags>
  </entry>
  <entry>
    <title>playwright的数据爬取</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%88%AC%E8%99%AB%E5%AE%89%E5%85%A8/playwright%E7%9A%84%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<p>对于playwright的爬虫，一般就是先使用xpathhlerper来查找到自己想要的东西，这会直接把文本内容显示出来的，然后使用playwright codegen来一步一步到达所在位置，然后使用循环来进行批量爬取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导入所需要的包</span><br><span class="line">import re</span><br><span class="line">from playwright.sync_api import Playwright, sync_playwright, expect</span><br><span class="line">from openpyxl import Workbook</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">#初始化 Excel 文件</span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line">ws.append([&quot;队伍&quot;, &quot;材料名称&quot;, &quot;类型&quot;, &quot;单位&quot;, &quot;数量&quot;])</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line">#设置excel文件路径</span><br><span class="line">desktop_path = os.path.join(os.path.expanduser(&quot;~&quot;), &quot;Desktop&quot;)</span><br><span class="line">file_path = os.path.join(desktop_path, &quot;output.xlsx&quot;)</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line">#浏览器自动化查找对应位置</span><br><span class="line">def run(playwright: Playwright) -&gt; None:</span><br><span class="line">    browser = playwright.chromium.launch(headless=False)</span><br><span class="line">    context = browser.new_context()</span><br><span class="line">    page = context.new_page()</span><br><span class="line">    page.goto(&quot;https://cms.zjjtgc.com/zjjg-portal-ui/login?redirect=%2Fhomepage%2Findex&quot;)</span><br><span class="line">   </span><br><span class="line">    # 登录过程</span><br><span class="line">    page.get_by_role(&quot;textbox&quot;, name=&quot;请输入用户名&quot;).click()</span><br><span class="line">    page.get_by_role(&quot;textbox&quot;, name=&quot;请输入用户名&quot;).fill(&quot;17353190891&quot;)</span><br><span class="line">    page.get_by_role(&quot;textbox&quot;, name=&quot;请输入用户名&quot;).press(&quot;Tab&quot;)</span><br><span class="line">    page.get_by_role(&quot;textbox&quot;, name=&quot;请输入密码&quot;).press(&quot;CapsLock&quot;)</span><br><span class="line">    page.get_by_role(&quot;textbox&quot;, name=&quot;请输入密码&quot;).fill(&quot;A&quot;)</span><br><span class="line">    page.get_by_role(&quot;textbox&quot;, name=&quot;请输入密码&quot;).press(&quot;CapsLock&quot;)</span><br><span class="line">    page.get_by_role(&quot;textbox&quot;, name=&quot;请输入密码&quot;).fill(&quot;Aa736188huang&quot;)</span><br><span class="line">    page.get_by_role(&quot;button&quot;, name=&quot;登 录&quot;).click()</span><br><span class="line">    page.get_by_text(&quot;应用中心&quot;).click()</span><br><span class="line">    </span><br><span class="line">    with page.expect_popup() as page1_info:</span><br><span class="line">        page.locator(&quot;#app-group-0&quot;).get_by_role(&quot;img&quot;, name=&quot;材料管理系统&quot;).click()</span><br><span class="line">    page1 = page1_info.value</span><br><span class="line">    page1.locator(&quot;div&quot;).filter(has_text=re.compile(r&quot;^库存管理$&quot;)).click()</span><br><span class="line">    page1.locator(&quot;div&quot;).filter(has_text=re.compile(r&quot;^材料出库$&quot;)).click()</span><br><span class="line">    page1.get_by_role(&quot;link&quot;, name=&quot;领料出库&quot;).click()</span><br><span class="line">    </span><br><span class="line">    page1.wait_for_timeout(5000)  # 等待页面加载完成</span><br><span class="line"></span><br><span class="line">    page1.get_by_role(&quot;textbox&quot;, name=&quot;请选择&quot;).click()</span><br><span class="line">    page1.get_by_text(&quot;100条/页&quot;).click()</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line">#获取总页数</span><br><span class="line">    time.sleep(5)  # 获取总页数</span><br><span class="line">    total_pages = int(page1.locator(f&quot;//button[@class=&#x27;vxe-pager--num-btn&#x27;][5]&quot;).first.inner_text())</span><br><span class="line">    print(f&quot;共 &#123;total_pages&#125; 页&quot;)</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line">#数据定位</span><br><span class="line">    # 页面循环</span><br><span class="line">    for page_num in range(1, total_pages + 1):</span><br><span class="line">        #行数循环</span><br><span class="line">        for i in range(1, 101):</span><br><span class="line">            try:</span><br><span class="line">                # 获取数据</span><br><span class="line">                cadre = page1.locator(f&quot;//table[contains(@class, &#x27;vxe-table--body&#x27;)]//tr[&#123;i&#125;]//td[contains(@class, &#x27;col_22&#x27;)]//span&quot;).first.inner_text()</span><br><span class="line">                name_of_material = page1.locator(f&quot;//table[contains(@class, &#x27;vxe-table--body&#x27;)]//tr[&#123;i&#125;]//td[contains(@class, &#x27;col_32&#x27;)]//span&quot;).first.inner_text()</span><br><span class="line">                setpecification = page1.locator(f&quot;//table[contains(@class, &#x27;vxe-table--body&#x27;)]//tr[&#123;i&#125;]//td[contains(@class, &#x27;col_43&#x27;)]//span&quot;).first.inner_text()</span><br><span class="line">                unit = page1.locator(f&quot;//table[contains(@class, &#x27;vxe-table--body&#x27;)]//tr[&#123;i&#125;]//td[contains(@class, &#x27;col_44&#x27;)]//span&quot;).first.inner_text()</span><br><span class="line">                number = page1.locator(f&quot;//table[contains(@class, &#x27;vxe-table--body&#x27;)]//tr[&#123;i&#125;]//td[contains(@class, &#x27;col_45&#x27;)]//span&quot;).first.inner_text()</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line"># 打印数据并写入Excel</span><br><span class="line">                print(f&quot;&#123;cadre&#125;|&#123;name_of_material&#125;|&#123;setpecification&#125;|&#123;unit&#125;|&#123;number&#125;&quot;)</span><br><span class="line">                ws.append([cadre, name_of_material, setpecification, unit, number])</span><br><span class="line">            except Exception as e:</span><br><span class="line">                print(f&quot;第&#123;i&#125;行出错：&#123;e&#125;&quot;)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">        print(&quot;============================================&quot;)</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line"># 点击下一页</span><br><span class="line">        if page_num &lt; total_pages:</span><br><span class="line">            page1.get_by_role(&quot;button&quot;, name=str(page_num + 1), exact=True).click()</span><br><span class="line"></span><br><span class="line">        page1.wait_for_timeout(3000)  # 等待页面加载完成</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line">#excel保存</span><br><span class="line">    wb.save(file_path)</span><br><span class="line">    </span><br><span class="line">#关闭</span><br><span class="line">    context.close()</span><br><span class="line">    browser.close()</span><br><span class="line"></span><br><span class="line">with sync_playwright() as playwright:</span><br><span class="line">    run(playwright)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>爬虫安全</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>playwright</tag>
      </tags>
  </entry>
  <entry>
    <title>python打包exe</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%88%AC%E8%99%AB%E5%AE%89%E5%85%A8/python%E6%89%93%E5%8C%85exe/</url>
    <content><![CDATA[<p>对于py文件打包成exe文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyinstaller --noconsole --onefile aa.py --add-data &quot;ic.ico;.&quot;</span><br></pre></td></tr></table></figure>

<h3 id="noconsole（或-w）"><a href="#noconsole（或-w）" class="headerlink" title="--noconsole（或 -w）"></a><code>--noconsole</code>（或 <code>-w</code>）</h3><p>表示 <strong>打包后运行时不会弹出黑色控制台窗口</strong>。</p>
<h3 id="onefile"><a href="#onefile" class="headerlink" title="--onefile"></a><code>--onefile</code></h3><p>打包成 <strong>单一 <code>.exe</code> 文件</strong>。</p>
<h3 id="aa-py"><a href="#aa-py" class="headerlink" title="aa.py"></a><code>aa.py</code></h3><p>你要打包的主 Python 脚本。</p>
<h3 id="add-data-ic-ico"><a href="#add-data-ic-ico" class="headerlink" title="--add-data &quot;ic.ico;.&quot;"></a><code>--add-data &quot;ic.ico;.&quot;</code></h3><p>–add-data “源路径;目标路径”</p>
<p>这是让 PyInstaller **把额外的资源文件一起打包进 <code>.exe</code>**。</p>
<ul>
<li>Windows 系统：用分号 <code>;</code> 分隔</li>
<li>Linux&#x2F;macOS：用冒号 <code>:</code> 分隔</li>
</ul>
<p><strong><code>ic.ico</code> 是你项目里的源文件</strong></p>
<p><strong><code>.</code> 表示打包后这个文件放到当前目录（运行时的“当前”目录）</strong></p>
<p>如果把所有文件都放在一个文件夹下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyinstaller --onefile --noconsole aa.py --add-data &quot;assets;assets&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>爬虫安全</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>终端快速 SSH 连接教程</title>
    <url>/2025/10/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/%E7%BB%88%E7%AB%AF%E5%BF%AB%E9%80%9F%20SSH%20%E8%BF%9E%E6%8E%A5%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>如何通过命令在mac或者ubuntu终端快速连接一个ssh的远程终端，通过账号密码的形式在 macOS 或 Ubuntu 终端中，通过账号密码形式快速连接 SSH 远程终端的基本命令格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh 用户名@远程服务器IP或域名</span><br></pre></td></tr></table></figure>

<p>执行后会提示输入对应用户的密码，输入正确后即可建立连接。</p>
<p>例如，连接 IP 为 <code>192.168.1.100</code>、用户名为 <code>john</code> 的服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh john@192.168.1.100</span><br></pre></td></tr></table></figure>

<p>如果服务器的 SSH 端口不是默认的 22（比如是 2222），需要指定端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 2222 john@192.168.1.100</span><br></pre></td></tr></table></figure>



<p>简化连接的技巧：</p>
<p><strong>出于安全考虑不建议</strong></p>
<p>如果需要频繁连接同一台服务器，可以在本地创建 SSH 配置文件来简化命令：</p>
<ol>
<li><p>编辑（或创建）配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加类似以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host myserver</span><br><span class="line">    HostName 192.168.1.100</span><br><span class="line">    User john</span><br><span class="line">    Port 2222</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存后，以后只需输入以下命令即可连接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh myserver</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这样每次连接时仍然需要输入密码，但不需要记忆复杂的 IP、端口和用户名了。</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>服务器配置</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>mac</tag>
        <tag>ssh</tag>
        <tag>远程连接</tag>
      </tags>
  </entry>
  <entry>
    <title>xhelp</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%88%AC%E8%99%AB%E5%AE%89%E5%85%A8/%E5%85%B3%E4%BA%8Exhelp%EF%BC%8C%E6%8C%89%E4%B8%8Bctrl+shift+x%E5%8F%AF%E4%BB%A5%E5%BC%B9%E5%87%BA%E7%95%8C%E9%9D%A2%E3%80%82%E7%84%B6%E5%90%8E%E5%9C%A8%E5%8F%AA%E6%8C%89ctrl+shift%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8A%8A%E9%BC%A0%E6%A0%87%E4%BD%8D%E4%BA%8E%E6%83%B3%E8%A6%81%E6%9F%A5%E6%89%BE%E7%9A%84%E4%B8%9C%E8%A5%BF%E4%B8%8A%E5%B0%B1%E8%83%BD%E6%98%BE%E7%A4%BA%E4%BA%86/</url>
    <content><![CDATA[<p>关于xhelp，按下ctrl+shift+x可以弹出界面。然后在只按ctrl+shift，然后把鼠标位于想要查找的东西上就能显示了</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>爬虫安全</category>
      </categories>
      <tags>
        <tag>playwright</tag>
        <tag>xhelp</tag>
      </tags>
  </entry>
  <entry>
    <title>快速分析出来一个api</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%88%AC%E8%99%AB%E5%AE%89%E5%85%A8/%E5%BF%AB%E9%80%9F%E5%88%86%E6%9E%90%E5%87%BA%E6%9D%A5%E4%B8%80%E4%B8%AAapi/</url>
    <content><![CDATA[<p>1、在浏览器查找相关数据的api</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250701204652098.png" alt="image-20250701204651886"></p>
<p>2、即使打开开发者，然后在对应的network下使用ctrl+f搜索要查找的内容，然后定位所需内容的所在的请求，在然后copy其curl（注意是bash下的）</p>
<p>3、然后可以导入postman当中查看下，</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250701205144182.png" alt="image-20250701205144078"></p>
<p>4、也可以使用python的request发起请求，这里有一个网站能直接将curl转化为python的request，即：<a href="https://curlconverter.com/">https://curlconverter.com/</a></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250701204937270.png" alt="image-20250701204937194"></p>
<p>复杂粘贴，添加几句代码，即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import urllib3</span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    &#x27;CCSESSID&#x27;: &#x27;n31md76nm2qsv4vqvv7bo0r22u&#x27;,</span><br><span class="line">    &#x27;inputUser&#x27;: &#x27;%2BSS0qEifrRMznZDfTqFlh2I4NjViYzEwNzA2ZGM3NDI1NDc3YWY3MzYwODUyYTU3MzQxMWVlOTA4NmY1ZTBhNDRkNmFjYmIzMWQ3YWRjYmQr6Fot%2FHa%2FV43G2CfjeUgj&#x27;,</span><br><span class="line">    &#x27;cookiePhone&#x27;: &#x27;6dXCuOl5waPwtFRQgPCUITY3ODI1YTZhYWRkMjE1MjU0MDNiMzM1NzgyYTI3NGM5NDJiNDA0NzM5MWZhZTE2NTZlMmJkMDBkNmI3Yzg3MzWxZaB4HEAW76xm7yElYXJ2&#x27;,</span><br><span class="line">    &#x27;Projmain-Token&#x27;: &#x27;52b1c126-273b-478e-8ac4-5831d61a1762&#x27;,</span><br><span class="line">    &#x27;ssoquery&#x27;: &#x27;&#123;%22token%22:%229b14e3e6dc974189ccabdf6241c9c417473ec7e1%22%2C%22rdi%22:%22calendar%22%2C%22ssohost%22:%22cms.zjjtgc.com%22%2C%22ssoproto%22:%22https%22%2C%22appid%22:%22wedge_calendar%22%2C%22ssoprefix%22:%22sso%22&#125;&#x27;,</span><br><span class="line">    &#x27;WiseSessionId&#x27;: &#x27;7b8d698d-dbd5-4d2b-b66e-ee88d8d81dd0&#x27;,</span><br><span class="line">    &#x27;Admin-Token&#x27;: &#x27;admin-token&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Accept&#x27;: &#x27;*/*&#x27;,</span><br><span class="line">    &#x27;Accept-Language&#x27;: &#x27;zh-CN,zh;q=0.9&#x27;,</span><br><span class="line">    &#x27;Authorization&#x27;: &#x27;fcb27683-1e41-40c3-aa75-33519604a9a7&#x27;,</span><br><span class="line">    &#x27;Connection&#x27;: &#x27;keep-alive&#x27;,</span><br><span class="line">    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,</span><br><span class="line">    &#x27;Origin&#x27;: &#x27;https://cms.zjjtgc.com&#x27;,</span><br><span class="line">    &#x27;Referer&#x27;: &#x27;https://cms.zjjtgc.com/jg-web/jg-inventory/&#x27;,</span><br><span class="line">    &#x27;Sec-Fetch-Dest&#x27;: &#x27;empty&#x27;,</span><br><span class="line">    &#x27;Sec-Fetch-Mode&#x27;: &#x27;cors&#x27;,</span><br><span class="line">    &#x27;Sec-Fetch-Site&#x27;: &#x27;same-origin&#x27;,</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36&#x27;,</span><br><span class="line">    &#x27;X-Requested-With&#x27;: &#x27;XMLHttpRequest&#x27;,</span><br><span class="line">    &#x27;sec-ch-ua&#x27;: &#x27;&quot;Google Chrome&quot;;v=&quot;137&quot;, &quot;Chromium&quot;;v=&quot;137&quot;, &quot;Not/A)Brand&quot;;v=&quot;24&quot;&#x27;,</span><br><span class="line">    &#x27;sec-ch-ua-mobile&#x27;: &#x27;?0&#x27;,</span><br><span class="line">    &#x27;sec-ch-ua-platform&#x27;: &#x27;&quot;Windows&quot;&#x27;,</span><br><span class="line">    &#x27;wise-json&#x27;: &#x27;1&#x27;,</span><br><span class="line">    # &#x27;Cookie&#x27;: &#x27;CCSESSID=n31md76nm2qsv4vqvv7bo0r22u; inputUser=%2BSS0qEifrRMznZDfTqFlh2I4NjViYzEwNzA2ZGM3NDI1NDc3YWY3MzYwODUyYTU3MzQxMWVlOTA4NmY1ZTBhNDRkNmFjYmIzMWQ3YWRjYmQr6Fot%2FHa%2FV43G2CfjeUgj; cookiePhone=6dXCuOl5waPwtFRQgPCUITY3ODI1YTZhYWRkMjE1MjU0MDNiMzM1NzgyYTI3NGM5NDJiNDA0NzM5MWZhZTE2NTZlMmJkMDBkNmI3Yzg3MzWxZaB4HEAW76xm7yElYXJ2; Projmain-Token=52b1c126-273b-478e-8ac4-5831d61a1762; ssoquery=&#123;%22token%22:%229b14e3e6dc974189ccabdf6241c9c417473ec7e1%22%2C%22rdi%22:%22calendar%22%2C%22ssohost%22:%22cms.zjjtgc.com%22%2C%22ssoproto%22:%22https%22%2C%22appid%22:%22wedge_calendar%22%2C%22ssoprefix%22:%22sso%22&#125;; WiseSessionId=7b8d698d-dbd5-4d2b-b66e-ee88d8d81dd0; Admin-Token=admin-token&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    &#x27;page&#x27;: &#x27;0&#x27;,</span><br><span class="line">    &#x27;size&#x27;: &#x27;20&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json_data = &#123;</span><br><span class="line">    &#x27;transtypeNo&#x27;: &#x27;QI&#x27;,</span><br><span class="line">    &#x27;projectNo&#x27;: &#x27;XM_0000497&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(</span><br><span class="line">    &#x27;https://cms.zjjtgc.com/jg-api/jg-inventory/mtlSheet/listAllDetailPage&#x27;,</span><br><span class="line">    params=params,</span><br><span class="line">    cookies=cookies,</span><br><span class="line">    headers=headers,</span><br><span class="line">    json=json_data,</span><br><span class="line">    verify=False</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<p>这里也能快速获取对应的cookie等数据。</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>爬虫安全</category>
      </categories>
      <tags>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>python虚拟环境导出</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%88%AC%E8%99%AB%E5%AE%89%E5%85%A8/%E6%8A%8Apython%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%AF%BC%E5%87%BA%E5%88%B0%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD/</url>
    <content><![CDATA[<p>直接就是一行命令</p>
<p>您可以使用以下命令将虚拟环境的依赖导出到一个文件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p>这将会将当前虚拟环境中安装的所有包及其版本号导出到名为 <code>requirements.txt</code> 的文件中。您可以随后使用该文件来安装相同的依赖，方法是在另一个环境中运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>请注意，导出的 <code>requirements.txt</code> 文件中将包含所有直接安装的包以及它们的依赖项。</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>爬虫安全</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>css速查表</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/css/css%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="1、border边框和圆角"><a href="#1、border边框和圆角" class="headerlink" title="1、border边框和圆角"></a>1、border边框和圆角</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">border: 1px solid #fff</span><br><span class="line"></span><br><span class="line">1px：边框宽度为 1 像素</span><br><span class="line">solid：边框样式为实线（常见的还有 dashed 虚线、dotted 点线）</span><br><span class="line">#fff：边框颜色是纯白色（#ffffff 的简写）</span><br><span class="line"></span><br><span class="line">solid（实线）、dashed（虚线）、dotted（点线）、double（双线）等。</span><br></pre></td></tr></table></figure>



<p>border-width: 2px 1px 3px 4px; 分别代表上、右、下、左四个方向的边框宽度。</p>
<p> border-radius: 5px 10px 5px 10px; 分别代表左上、右上、右下、左下四个角的圆角半径。</p>
<h2 id="2、z-index图层"><a href="#2、z-index图层" class="headerlink" title="2、z-index图层"></a>2、z-index图层</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">z-index: -1</span><br><span class="line"></span><br><span class="line">z-index 只在有 定位属性（position: relative / absolute / fixed / sticky） 的元素上才会真正生效。</span><br></pre></td></tr></table></figure>

<p>在 CSS 中，z-index 属性用于控制元素的堆叠顺序（stacking order）。具有更高 z-index 值的元素会覆盖具有较低 z-index 值的元素。z-index 可以是整数、负数或 auto。如果多个元素具有相同的 z-index 值，则它们的堆叠顺序取决于它们在文档流中的位置，后出现的元素会覆盖先出现的元素。</p>
<p>和ps中的图层一个道理，值越大图层越靠前</p>
<h2 id="3、font-系列、字体相关属性"><a href="#3、font-系列、字体相关属性" class="headerlink" title="3、font-系列、字体相关属性"></a>3、font-系列、字体相关属性</h2><p><strong>1. <code>font-size</code> → 字体大小</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-size: 16px;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>2. <code>font-weight</code> → 字体粗细</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-weight: bold;</span><br></pre></td></tr></table></figure>

<p>常见值：</p>
<ul>
<li><code>normal</code>（默认，400）</li>
<li><code>bold</code>（加粗，700）</li>
<li><code>100 ~ 900</code>（数字越大越粗，常用 <code>400</code> &#x3D; normal，<code>700</code> &#x3D; bold）</li>
</ul>
<hr>
<p><strong>3. <code>font-style</code> → 字体样式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-style: italic;</span><br></pre></td></tr></table></figure>

<p>常见值：</p>
<ul>
<li><code>normal</code>（默认）</li>
<li><code>italic</code>（斜体，通常使用字体自带的斜体样式）</li>
<li><code>oblique</code>（倾斜，直接把文字“歪”过去）</li>
</ul>
<hr>
<p><strong>4. <code>line-height</code> → 行高（文字上下的间距）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">line-height: 1.5;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以写数字（倍数，推荐 <code>1.5</code>）</li>
<li>也能用单位 → <code>line-height: 24px;</code></li>
<li>常用来让文字更容易阅读</li>
</ul>
<h2 id="4、text-decoration下划线"><a href="#4、text-decoration下划线" class="headerlink" title="4、text-decoration下划线"></a>4、text-decoration下划线</h2><p>text-decoration 是 CSS 属性之一，用于指定文本的装饰效果，例如下划线、删除线等。主要用于控制文本的装饰效果，有以下几种常见的值：</p>
<ol>
<li><pre><code>1. none: 默认值，没有装饰。
2. underline: 给文本添加下划线。
3. overline: 给文本添加上划线。
4. line-through: 给文本添加删除线。
5. underline     overline: 同时添加上划线和下划线。
6. underline     line-through: 同时添加下划线和删除线。
7. inherit: 继承父元素的 text-decoration 值。
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">## 5、background背景</span><br><span class="line"></span><br></pre></td></tr></table></figure>
background: transparent;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 一般开发时先给个背景色，方便看布局。</span><br><span class="line">- 后期如果不需要颜色，就改成 `transparent`（透明）。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
min-height: 100vh; /* 保证背景图撑满屏幕高度 */
background: url(&#39;background.jpg&#39;) no-repeat;
background-size: cover;     /* 背景图按比例放大/缩小，始终覆盖整个容器 */
background-position: center;/* 背景图居中显示 */
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **`100vh`** → 视口高度的 100%，确保满屏。</span><br><span class="line">- **`background: url(...) no-repeat;`** → 设置背景图片，不重复平铺。</span><br><span class="line">- **`background-size: cover;`** → 图片等比例放大/缩小，保证覆盖整个容器（可能会裁剪）。</span><br><span class="line">- **`background-position: center;`** → 图片居中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 6、filter模糊、亮度、对比度、灰度</span><br><span class="line"></span><br><span class="line">![image-20250824171629668](https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250824171629780.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 7、cursor鼠标样式</span><br><span class="line"></span><br><span class="line">![image-20250824171744780](https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250824171744851.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 8、opacity透明度</span><br><span class="line"></span><br></pre></td></tr></table></figure>
opacity：0.5
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">opacity 是 CSS 属性之一，用于设置元素的不透明度级别。它的取值范围是从 0 到 1，其中 0 表示完全透明，1 表示完全不透明。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 9、伪类</span><br><span class="line"></span><br></pre></td></tr></table></figure>
/* 伪类 */
:hover &#123; /* 鼠标悬停 */
  color: red;
&#125;
:focus &#123; /* 元素获得焦点 */
  outline: 2px solid blue;
&#125;
:active &#123; /* 元素被激活（点击） */
  background-color: gray;
&#125;
</code></pre>
</li>
</ol>
<p>&#x2F;* 伪元素 <em>&#x2F;<br>::before { &#x2F;</em> 在元素前插入内容 <em>&#x2F;<br>  content: “★”;<br>  color: gold;<br>}<br>::after { &#x2F;</em> 在元素后插入内容 *&#x2F;<br>  content: “→”;<br>  color: blue;<br>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 10、transform变换</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>transform: translate(50px, 100px); &#x2F;* 平移：x 轴 50px，y 轴 100px <em>&#x2F;<br>transform: rotate(45deg); &#x2F;</em> 旋转 45 度 <em>&#x2F;<br>transform: scale(1.2); &#x2F;</em> 放大 1.2 倍 <em>&#x2F;<br>transform: skew(10deg, 20deg); &#x2F;</em> 倾斜：x 轴 10 度，y 轴 20 度 *&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 11、Transition过渡</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>transition: all 0.3s ease; &#x2F;* 所有属性变化，持续 0.3 秒，缓动效果 <em>&#x2F;<br>transition: background-color 0.5s linear; &#x2F;</em> 仅背景色变化，持续 0.5 秒，线性过渡 *&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 12、常用大小单位</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&#x2F;* 百分比：相对于父元素对应属性的百分比 <em>&#x2F;<br>width: 50%; &#x2F;</em> 父元素宽度的 50% <em>&#x2F;<br>font-size: 120%; &#x2F;</em> 父元素字体大小的 120% *&#x2F;</p>
<p>&#x2F;* rem：相对于根元素（<html>）的字体大小 <em>&#x2F;<br>font-size: 1.5rem; &#x2F;</em> 根元素字体大小的 1.5 倍 *&#x2F;<br>margin: 2rem;</p>
<p>&#x2F;* em：相对于父元素的字体大小 <em>&#x2F;<br>padding: 1em; &#x2F;</em> 父元素字体大小的 1 倍 *&#x2F;<br>line-height: 1.5em;</p>
<p>&#x2F;* vw：视口宽度的 1% <em>&#x2F;<br>width: 50vw; &#x2F;</em> 视口宽度的 50% *&#x2F;</p>
<p>&#x2F;* vh：视口高度的 1% <em>&#x2F;<br>height: 100vh; &#x2F;</em> 视口高度的 100% *&#x2F;</p>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>vue父子兄弟之间传值</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/vue/Vue%E7%9A%84%E7%88%B6%E5%AD%90%E5%85%84%E5%BC%9F%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<p>对于一个页面，我们通常会写多个组件，并将其分开写，方便以后维护，这就涉及到了组件之间的传值。</p>
<h2 id="非总线机制"><a href="#非总线机制" class="headerlink" title="非总线机制"></a>非总线机制</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;我是父组件&lt;/div&gt;</span><br><span class="line">	&lt;ZJA :li_a=&quot;li_a&quot; :abc=&quot;abc&quot; :hanshu=&quot;hanshu&quot;&gt;&lt;/ZJA&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ZJA from &#x27;./component/zujian-a.vue&#x27;</span><br><span class="line"></span><br><span class="line">const li_a = ref(&#x27;dasd&#x27;)</span><br><span class="line">const abc = &#x27;我是父组件传来的&#x27;</span><br><span class="line">const hanshu = () =&gt; &#123;</span><br><span class="line">	console.log(&#x27;顶顶顶顶&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; props.li_a &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; props.abc &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;hanshu&quot;&gt;调用父组件函数&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineProps &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 这是一种调用的方法，但要声明</span><br><span class="line">// const props = defineProps(&#123;</span><br><span class="line">//   li_a: String,</span><br><span class="line">//   abc: String,</span><br><span class="line">//   hanshu: Function</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// 这一种直接使用</span><br><span class="line">const props = defineProps([</span><br><span class="line">  &#x27;li_a&#x27;,</span><br><span class="line">  &#x27;abc&#x27;,</span><br><span class="line">  &#x27;hanshu&#x27;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">		&lt;button @click=&quot;sendValueToParent&quot;&gt;传值给父组件&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineEmits, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 声明自定义事件</span><br><span class="line">const emits = defineEmits([&#x27;childEvent&#x27;]);</span><br><span class="line"></span><br><span class="line">// 点击方法传函数和值</span><br><span class="line">const sendValueToParent = ()=&gt;&#123;</span><br><span class="line">	const valueToSend = ()=&gt;&#123;</span><br><span class="line">		console.log(&quot;哈哈哈哈哈哈哈啊&quot;)</span><br><span class="line">	&#125;;</span><br><span class="line">	const h = &#x27;阿三大苏打撒旦&#x27;</span><br><span class="line">	emits(&#x27;childEvent&#x27;, valueToSend, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//生命周期传值</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  const valueToSenda = &#x27;这是非按钮子组件传给父组件的值&#x27;;</span><br><span class="line">  emits(&#x27;childEventa&#x27;, valueToSenda);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;我是父组件&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">	&lt;p&gt;从子组件接收到的值：&#123;&#123; receivedValue &#125;&#125;&lt;/p&gt;</span><br><span class="line">	&lt;ZJB @childEvent=&quot;handleChildEvent&quot; /&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;p&gt;不是从按钮子组件接收到的值：&#123;&#123; receivedValuea &#125;&#125;&lt;/p&gt;</span><br><span class="line">	&lt;ZJB @childEventa=&quot;handleChildEventa&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ZJB from &#x27;./component/zujian-b.vue&#x27;</span><br><span class="line"></span><br><span class="line">//存储子组件传过来的值</span><br><span class="line">const receivedValue = ref(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">// 点击方法获得子组件传过来的东西</span><br><span class="line">const handleChildEvent = (valueToSend,h)=&gt;&#123;</span><br><span class="line">	receivedValue.value = h</span><br><span class="line">	valueToSend();//子组件传过来的函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//存储子组件传过来的值</span><br><span class="line">const receivedValuea = ref(&#x27;&#x27;);</span><br><span class="line">// 生命周期方法获得子组件传过来的东西</span><br><span class="line">function handleChildEventa(valueReceived) &#123;</span><br><span class="line">  receivedValuea.value = valueReceived;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="子传子的话可以先子传父在父传子"><a href="#子传子的话可以先子传父在父传子" class="headerlink" title="子传子的话可以先子传父在父传子"></a>子传子的话可以先子传父在父传子</h3><h3 id="总线机制"><a href="#总线机制" class="headerlink" title="总线机制"></a>总线机制</h3><p>其实和上面的很像的，只是要多一个js文件。</p>
<p>结构为<br><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240503142852677.png" alt="image-20240503142852677"></p>
<p>js文件怎么写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataStore.vue</span><br><span class="line">文件的内容</span><br><span class="line"></span><br><span class="line">import mitt from &#x27;mitt&#x27;;</span><br><span class="line">// 创建一个响应式变量来存储需要传递的数据</span><br><span class="line"></span><br><span class="line">// 创建事件总线</span><br><span class="line">const eventBus = mitt();</span><br><span class="line"></span><br><span class="line">const Father = mitt();</span><br><span class="line"></span><br><span class="line">export &#123; eventBus, Father &#125;; // 导出 sharedData 变量和 eventBus 对象</span><br></pre></td></tr></table></figure>



<p>每个组件文件都要引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; eventBus, Father &#125; from &#x27;./component/dataStore&#x27;;</span><br></pre></td></tr></table></figure>



<p>然后就是传值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; eventBus, Father &#125; from &#x27;./component/dataStore&#x27;;</span><br><span class="line"></span><br><span class="line">这里一定要引入Father哈</span><br><span class="line"></span><br><span class="line">const Parent = () =&gt; &#123;</span><br><span class="line">	const dataToSend = &#x27;急急急急急急急急急急急急就&#x27;;</span><br><span class="line">	Father.emit(&#x27;fatherData&#x27;, dataToSend);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">和上面一样的，也可以传函数。</span><br><span class="line"></span><br><span class="line">const Parent = () =&gt; &#123;</span><br><span class="line">	const asdasd = ()=&gt;&#123;</span><br><span class="line">		console.log(&quot;萨达萨达萨达萨达撒旦撒旦&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">	Father.emit(&#x27;fatherData&#x27;, asdasd);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">如果这个函数在外面也没关系，一样的方法进行传值</span><br><span class="line"></span><br><span class="line">const asdasd = ()=&gt;&#123;</span><br><span class="line">	console.log(&quot;萨达萨达萨达萨达撒旦撒旦&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Parent = () =&gt; &#123;</span><br><span class="line">	asdasd()</span><br><span class="line">	Father.emit(&#x27;fatherData&#x27;, asdasd);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>然后就是要接收的组件了</p>
<pre><code>onMounted(()=&gt;	&#123;
    Father.on(&#39;fatherData&#39;,	(asdasd)	=&gt;	&#123;
            asdasd();
        &#125;);
&#125;);
这个一般放在一个生命周期函数中。自动接收嘛，或者其他的也行。
</code></pre>
<h3 id="总结一下，非总线的子传父和总线机制比较相识，非总的父传子则最为简单。"><a href="#总结一下，非总线的子传父和总线机制比较相识，非总的父传子则最为简单。" class="headerlink" title="总结一下，非总线的子传父和总线机制比较相识，非总的父传子则最为简单。"></a>总结一下，非总线的子传父和总线机制比较相识，非总的父传子则最为简单。</h3>]]></content>
      <categories>
        <category>编程学习</category>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue基础</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/vue/vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1、响应式数据ref"><a href="#1、响应式数据ref" class="headerlink" title="1、响应式数据ref"></a>1、响应式数据ref</h2><p><code>ref</code> 用来创建一个<strong>响应式数据</strong></p>
<p><code>ref</code> 接收一个初始值。</p>
<p><code>.value</code> 用来访问或修改数据。</p>
<p>当 <code>.value</code> 改变时，模板会自动更新。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const msg = ref(&#x27;Hello World!&#x27;)</span><br><span class="line">msg.value = &quot;dsada&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;input v-model=&quot;msg&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>还有一种写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1 ref=&quot;multipleTableRef&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const multipleTableRef = ref()</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  multipleTableRef.value.textContent = &quot;dsad&quot; // 操作 DOM</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>注意一定要在 <code>onMounted</code> 里操作，因为 DOM 还没渲染之前，<code>multipleTableRef.value</code> 是 <code>undefined</code>。</p>
<p>不要直接 <code>multipleTableRef.value = &quot;dsad&quot;</code>，那样 Vue 会报错。</p>
<h2 id="2、响应式对象reactive"><a href="#2、响应式对象reactive" class="headerlink" title="2、响应式对象reactive"></a>2、响应式对象reactive</h2><p><code>reactive</code> 用来创建一个<strong>响应式对象</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line"> const state = reactive(&#123;</span><br><span class="line">      count: &quot;dsad&quot;,</span><br><span class="line">      message: &#x27;Hello Vue!&#x27;,</span><br><span class="line">      add: &quot;dasd&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;state.message&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;state.count&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;state.add&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<h2 id="3、数据双向绑定v-model"><a href="#3、数据双向绑定v-model" class="headerlink" title="3、数据双向绑定v-model"></a>3、数据双向绑定v-model</h2><p>v-model &#x3D; 数据双向绑定</p>
<p>输入框内容变化 → <code>message</code> 自动更新</p>
<p><code>message</code> 改变 → 输入框内容自动更新</p>
<p>就是<strong>双向绑定</strong>的概念</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;message&quot; placeholder=&quot;输入内容&quot;&gt;</span><br><span class="line">    &lt;p&gt;你输入的是：&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const message = ref(&#x27;&#x27;); // 响应式变量</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="4、属性绑定v-bind"><a href="#4、属性绑定v-bind" class="headerlink" title="4、属性绑定v-bind"></a>4、属性绑定v-bind</h2><p>把 Vue 里的 <strong>数据变量绑定到 HTML 或组件的属性上</strong>。</p>
<p>在 Vue 里，<code>:</code> 是 <strong>v-bind 的简写</strong></p>
<p>src是html里面本来的属性，按理说只能是一个唯一的，写死的，现在使用v-bind，它就可以变化了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 用 v-bind 动态绑定图片地址 --&gt;</span><br><span class="line">    &lt;img :src=&quot;imageUrl&quot; alt=&quot;示例图片&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const imageUrl = ref(&#x27;https://via.placeholder.com/150&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="5、条件渲染v-if"><a href="#5、条件渲染v-if" class="headerlink" title="5、条件渲染v-if"></a>5、条件渲染v-if</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;这句话只有在 show 为 true 时才会显示&lt;/p&gt;</span><br><span class="line">    &lt;p v-else&gt;show 为 false 时显示这一句&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const show = ref(true)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="6、触发事件绑定-event-”method”"><a href="#6、触发事件绑定-event-”method”" class="headerlink" title="6、触发事件绑定@event&#x3D;”method”"></a>6、触发事件绑定@event&#x3D;”method”</h2><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 简写 --&gt;</span><br><span class="line">@事件名=&quot;方法名&quot;</span><br><span class="line"></span><br><span class="line">&lt;!-- 完整写法 --&gt;</span><br><span class="line">v-on:事件名=&quot;方法名&quot;</span><br></pre></td></tr></table></figure>

<p>个人理解：触发事件绑定嘛，就是触发了某一动作，比如说点击，移动，然后就会执行自定义函数中的内容嘛。</p>
<p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;handleClick&quot;&gt;点我&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const handleClick = () =&gt; &#123;</span><br><span class="line">  alert(&#x27;按钮被点击了！&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>常用的vue方法</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250828155035873.png" alt="image-20250828155035786"></p>
<h2 id="7、生命周期函数"><a href="#7、生命周期函数" class="headerlink" title="7、生命周期函数"></a>7、生命周期函数</h2><p>都是对于组件而言的东西</p>
<h3 id="（1）setup"><a href="#（1）setup" class="headerlink" title="（1）setup()"></a>（1）setup()</h3><p>组件实例创建时，<strong>还没挂载到 DOM</strong></p>
<p>初始化数据、定义方法、引入响应式状态</p>
<p><code>setup()</code> 是 <strong>组件创建时最先执行的函数</strong>，在这里你可以：</p>
<ul>
<li>定义响应式数据（<code>ref</code> &#x2F; <code>reactive</code>）</li>
<li>定义方法（函数）</li>
<li>引入计算属性（<code>computed</code>）</li>
<li>调用生命周期钩子（<code>onMounted</code>、<code>onBeforeUnmount</code> 等）</li>
</ul>
<p>一般不写是直接隐藏了，但是流程是这么个流程</p>
<h3 id="（2）onBeforeMount"><a href="#（2）onBeforeMount" class="headerlink" title="（2）onBeforeMount()"></a>（2）onBeforeMount()</h3><p>在 DOM 渲染之前，可以做一些初始化工作，基本不用。</p>
<h3 id="（3）onMounted"><a href="#（3）onMounted" class="headerlink" title="（3）onMounted"></a>（3）onMounted</h3><p>在 Vue 里，**从后端获取数据（API 请求）最常见的位置是 <code>onMounted()</code>**。</p>
<p>当组件真正出现在页面上后，执行你在 <code>onMounted</code> 里写的函数。</p>
<p><code>onMounted</code> 内的代码在 <strong>DOM 渲染完成后</strong> 执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;窗口宽度：&#123;&#123; windowWidth &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const windowWidth = ref(0);</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  windowWidth.value = window.innerWidth; // 组件挂载后获取窗口宽度</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="（4）onBeforeUpdate"><a href="#（4）onBeforeUpdate" class="headerlink" title="（4）onBeforeUpdate()"></a>（4）onBeforeUpdate()</h3><p>在 <strong>组件的响应式数据发生变化、DOM 更新之前</strong> 执行。</p>
<blockquote>
<p>简单理解就是：数据变了，但页面还没刷新显示时，会先执行这个钩子。</p>
</blockquote>
<h3 id="（5）onUpdated"><a href="#（5）onUpdated" class="headerlink" title="（5）onUpdated()"></a>（5）onUpdated()</h3><p>DOM 已经根据最新数据更新</p>
<h3 id="（6）onBeforeUnmount"><a href="#（6）onBeforeUnmount" class="headerlink" title="（6）onBeforeUnmount"></a>（6）onBeforeUnmount</h3><p><strong>组件被销毁（unmount）</strong> 并不是指整个网页关闭，而是指<strong>这个组件从页面上被移除</strong>，它对应的 DOM 元素也会被 Vue 清理掉。</p>
<p>常见情况</p>
<p>路由切换：你跳转到页面 B，组件 A 从 DOM 上消失 → <strong>被销毁</strong>。</p>
<p>条件渲染：用 <code>v-if</code> 控制组件显示&#x2F;隐藏。</p>
<p>父组件销毁</p>
<h3 id="（7）onUnmounted"><a href="#（7）onUnmounted" class="headerlink" title="（7）onUnmounted()"></a>（7）onUnmounted()</h3><p>组件从页面上移除，DOM 已经消失了，这时执行 <code>onUnmounted()</code> 用来做最后清理或收尾工作。</p>
<h3 id="（8）生命周期函数总结"><a href="#（8）生命周期函数总结" class="headerlink" title="（8）生命周期函数总结"></a>（8）生命周期函数总结</h3><p>其实我觉得这个生命周期就三点吧，setup实际感觉就是隐藏起来的，基本不用，一是整个组件的一个初始化，然后就是数据变动时，然后就是组件销毁时。然后这些时有分前后before在这些之前，其他就是之后。</p>
<p><strong>初始化阶段</strong></p>
<ul>
<li><code>setup()</code>（数据、方法初始化）</li>
<li><code>onBeforeMount()</code>（DOM 还没渲染）</li>
<li><code>onMounted()</code>（DOM 渲染完成）</li>
</ul>
<p><strong>更新阶段</strong></p>
<ul>
<li><code>onBeforeUpdate()</code>（数据变了，DOM 还没更新）</li>
<li><code>onUpdated()</code>（DOM 已更新）</li>
</ul>
<p><strong>销毁阶段</strong></p>
<ul>
<li><code>onBeforeUnmount()</code>（即将销毁，做清理准备）</li>
<li><code>onUnmounted()</code>（销毁完成，DOM 已移除）</li>
</ul>
<p>最常用 &#x3D; onMounted()，其次 &#x3D; onUnmounted()**（和资源清理相关），其他则很少了。</p>
<p> <strong>“setup 定义逻辑，onMounted 发请求，onUnmounted 做清理”</strong></p>
<h2 id="8、computed"><a href="#8、computed" class="headerlink" title="8、computed"></a>8、computed</h2><p>vue里面凡是涉及到计算的都要用computed了，因为能缓存节省性能。</p>
<p><strong>和模板绑定的计算值 → 用 computed，一次性调用的逻辑 → 用函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const brickA = ref(2)</span><br><span class="line">const brickB = ref(3)</span><br><span class="line"></span><br><span class="line">const totalWeight = computed(() =&gt; brickA.value + brickB.value)</span><br><span class="line"></span><br><span class="line">function getTotal() &#123;</span><br><span class="line">  return brickA.value + brickB.value</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="9、watch"><a href="#9、watch" class="headerlink" title="9、watch"></a>9、watch</h2><p><code>watch</code> 就是 <strong>“监听某个数据的变化，并执行一段副作用逻辑”</strong>。，可以同时监听多个值，就是值变化了执行什么什么东西这种。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">watch(count, (newVal, oldVal) =&gt; &#123;</span><br><span class="line">  console.log(`count 从 $&#123;oldVal&#125; 变成了 $&#123;newVal&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="10、axios请求"><a href="#10、axios请求" class="headerlink" title="10、axios请求"></a>10、axios请求</h2><p>就是想后端发起请求获取返回的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const zong = ref([]);</span><br><span class="line"></span><br><span class="line">const getAllData = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const response = await axios.get(&#x27;http://127.0.0.1:5000/all_data&#x27;);</span><br><span class="line">    console.log(&#x27;获取数据成功:&#x27;, response.data);</span><br><span class="line">    zong.value = response.data;</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    // 一行直接打印完整错误信息</span><br><span class="line">    console.error(&#x27;请求出错:&#x27;, error?.response?.data || error?.message || error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>后端数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 25 &#125;</span><br></pre></td></tr></table></figure>

<p>如果返回是单个json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zong.value = response.data;</span><br><span class="line">console.log(zong.value.name); // 输出：张三</span><br></pre></td></tr></table></figure>

<p>如果是多个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const names = zong.value.map(item =&gt; item.name);</span><br><span class="line">console.log(names); </span><br></pre></td></tr></table></figure>



<p>然后是psot请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">const zong = ref([]);</span><br><span class="line"></span><br><span class="line">const getAllData = async () =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const params = &#123; userId: 123, type: &#x27;all&#x27; &#125;; // 要传给后端的参数</span><br><span class="line">    const response = await axios.post(&#x27;http://127.0.0.1:5000/all_data&#x27;, params);</span><br><span class="line">    </span><br><span class="line">    // 存储返回的数据</span><br><span class="line">    zong.value = response.data;</span><br><span class="line"></span><br><span class="line">    // 如果返回的是数组对象，获取所有 name</span><br><span class="line">    const names = zong.value.map(item =&gt; item.name);</span><br><span class="line">    console.log(&#x27;所有 name:&#x27;, names);</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    console.error(&#x27;请求出错:&#x27;, error?.response?.data || error?.message || error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端布局四大关键点</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%B8%83%E5%B1%80/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E5%9B%9B%E5%A4%A7%E5%85%B3%E9%94%AE%E7%82%B9/</url>
    <content><![CDATA[<h2 id="1-position（定位）"><a href="#1-position（定位）" class="headerlink" title="1. position（定位）"></a>1. <strong>position（定位）</strong></h2><ul>
<li><p><strong>定义</strong>：position 属性控制元素的定位方式，决定元素在页面中的位置及行为。然后就可以left，right</p>
</li>
<li><p>常用值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">position: static; /* 默认，正常文档流 */</span><br><span class="line"></span><br><span class="line">position: relative; /* 相对自身原位置偏移 */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">position: absolute; /* 相对于最近的定位祖先元素 */		</span><br><span class="line">以父元素的relative为定位，如果没有这个父元素则以body为参考，父元素加个relative这很重要。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">position: fixed; /* 相对于视口固定 */</span><br><span class="line">position: sticky; /* 滚动到指定位置时固定 */</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用场景</p>
<ul>
<li><strong>relative</strong>：微调元素位置（如偏移几像素）。</li>
<li><strong>absolute</strong>：弹出层、模态框、悬浮元素。</li>
<li><strong>fixed</strong>：固定导航栏、返回顶部按钮。</li>
<li><strong>sticky</strong>：粘性表头或侧边栏。</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>精确控制元素位置，适合复杂布局（如重叠效果）。</li>
<li>sticky 提供动态滚动效果，简单高效。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>absolute 和 fixed 脱离文档流，可能导致布局复杂。</li>
<li>需要明确父元素定位（如 position: relative）以控制 absolute。</li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>使用 absolute 时，确保父元素有定位属性（非 static）。</li>
<li>配合 z-index 控制层叠顺序（如 z-index: 10;）。</li>
<li>测试 sticky 的浏览器兼容性（现代浏览器支持良好）。</li>
</ul>
</li>
<li><p>代码示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.modal &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  transform: translate(-50%, -50%); /* 居中 */</span><br><span class="line">  z-index: 100;</span><br><span class="line">&#125;</span><br><span class="line">.sticky-header &#123;</span><br><span class="line">  position: sticky;</span><br><span class="line">  top: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-Flex-布局（弹性盒布局）"><a href="#2-Flex-布局（弹性盒布局）" class="headerlink" title="2. Flex 布局（弹性盒布局）"></a>2. <strong>Flex 布局（弹性盒布局）</strong></h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250829110341884.png" alt="80d199228704c6ad829b8d208abf7ec4"></p>
<ul>
<li><p><strong>定义</strong>：display: flex; 提供一维布局（行或列），用于灵活排列子元素。</p>
</li>
<li><p>核心属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display: flex;</span><br><span class="line">flex-direction: row | column; /* 主轴方向：水平 | 垂直 */</span><br><span class="line">justify-content: center | space-between | space-around; /* 主轴对齐 */</span><br><span class="line">align-items: center | flex-start | flex-end; /* 交叉轴对齐 */</span><br><span class="line">flex-wrap: wrap | nowrap; /* 是否换行 */</span><br><span class="line">gap: 20px; /* 子元素间距 */</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用场景</p>
<ul>
<li>水平&#x2F;垂直居中：justify-content: center; align-items: center;</li>
<li>导航栏、卡片列表、表单布局。</li>
<li>自适应布局：子元素自动分配空间。</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>简单高效，轻松实现复杂布局（如居中、等分）。</li>
<li>响应式友好，配合 flex-wrap 和 gap 适配不同屏幕。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>仅适合一维布局，复杂二维布局需用 Grid。</li>
<li>老旧浏览器（如 IE9）兼容性较差（现代浏览器无问题）。</li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>确保父元素有 display: flex;。</li>
<li>使用 flex: 1; 或 flex-grow 分配子元素空间。</li>
<li>测试换行效果（wrap）以避免溢出。</li>
</ul>
</li>
<li><p>代码示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  gap: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">  flex: 1; /* 均分空间 */</span><br><span class="line">  min-width: 200px; /* 防止过小 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-媒体查询（Media-Queries）"><a href="#3-媒体查询（Media-Queries）" class="headerlink" title="3. 媒体查询（Media Queries）"></a>3. <strong>媒体查询（Media Queries）</strong></h2><ul>
<li><p><strong>定义</strong>：通过 @media 规则根据设备特性（如屏幕宽度）应用不同样式，实现响应式设计。</p>
</li>
<li><p>常用语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@media (max-width: 768px) &#123;</span><br><span class="line">  /* 屏幕宽度 ≤ 768px 时的样式 */</span><br><span class="line">  body &#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">  &#125;</span><br><span class="line">  .container &#123;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (min-width: 1024px) &#123;</span><br><span class="line">  /* 屏幕宽度 ≥ 1024px 时的样式 */</span><br><span class="line">  .container &#123;</span><br><span class="line">    width: 960px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用场景</p>
<ul>
<li>适配手机、平板、桌面设备。</li>
<li>调整字体大小、布局方向、间距等。</li>
<li>隐藏&#x2F;显示元素（如移动端隐藏侧边栏）。</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>实现响应式布局，适配多种设备。</li>
<li>灵活性高，可针对不同屏幕精细调整。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>媒体查询过多可能增加 CSS 复杂度。</li>
<li>需要测试多种设备，确保效果一致。</li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>常用断点：576px（手机）、768px（平板）、992px（桌面小）、1200px（桌面大）。</li>
<li>优先使用相对单位（如 rem、vw）以增强适配性。</li>
<li>考虑移动优先（min-width）或桌面优先（max-width）策略。</li>
</ul>
</li>
</ul>
<p>按设备尺寸</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@media screen and （min -device-width：100px） and （max-device-width：200px）&#123;</span><br><span class="line">	#div0&#123;</span><br><span class="line">		background-color:green;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当设备尺寸位100px到200px之间时，按下面的css代码执行</p>
<p>按浏览器尺寸</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@media screen and （min-width：100px） and （max-width：200px）&#123;</span><br><span class="line">	#div0&#123;</span><br><span class="line">		background-color:green;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当浏览器尺寸位100px到200px之间时，按下面的css代码执行</p>
<h2 id="4-JS-动态大小"><a href="#4-JS-动态大小" class="headerlink" title="4. JS 动态大小"></a>4. <strong>JS 动态大小</strong></h2><ul>
<li><p><strong>定义</strong>：通过 JavaScript 动态计算和设置元素尺寸（如宽度、高度、字体大小等），实现更灵活的布局控制。</p>
</li>
<li><p>实现方式</p>
<ul>
<li>获取元素尺寸：element.offsetWidth、element.offsetHeight。</li>
<li>设置样式：element.style.width &#x3D; ‘100px’;。</li>
<li>监听窗口变化：window.addEventListener(‘resize’, …)。</li>
<li>使用视口尺寸：window.innerWidth、window.innerHeight。</li>
</ul>
</li>
<li><p>使用场景</p>
<ul>
<li>动态调整元素大小（如根据内容或窗口尺寸）。</li>
<li>复杂响应式逻辑（如动态计算列数）。</li>
<li>动画或交互效果（如拖拽调整尺寸）。</li>
</ul>
</li>
<li><p>优点</p>
<ul>
<li>高度灵活，可处理 CSS 难以实现的动态逻辑。</li>
<li>结合视口或用户交互实现实时适配。</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>增加代码复杂度和维护成本。</li>
<li>性能开销可能高于纯 CSS 方案。</li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>尽量用 CSS 解决布局问题，JS 只处理复杂动态逻辑。</li>
<li>使用防抖（debounce）或节流（throttle）优化 resize 事件性能。</li>
<li>确保 JS 失效时布局仍可正常显示（渐进增强）。</li>
</ul>
</li>
<li><p>代码示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 动态设置容器宽度为视口宽度的 50%</span><br><span class="line">const container = document.querySelector(&#x27;.container&#x27;);</span><br><span class="line">function updateSize() &#123;</span><br><span class="line">  container.style.width = `$&#123;window.innerWidth * 0.5&#125;px`;</span><br><span class="line">&#125;</span><br><span class="line">window.addEventListener(&#x27;resize&#x27;, updateSize);</span><br><span class="line">updateSize(); // 初始调用</span><br><span class="line"></span><br><span class="line">// 动态调整字体大小基于内容长度</span><br><span class="line">const text = document.querySelector(&#x27;.text&#x27;);</span><br><span class="line">const contentLength = text.textContent.length;</span><br><span class="line">text.style.fontSize = `$&#123;Math.min(16 + contentLength * 0.5, 24)&#125;px`;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;p class=&quot;text&quot;&gt;动态文本&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<p>总结</p>
<ul>
<li><strong>position</strong>：提供精确的定位控制，适合静态和动态布局。</li>
<li><strong>Flex 布局</strong>：简化一维布局，响应式友好，覆盖大多数日常场景。</li>
<li><strong>媒体查询</strong>：实现跨设备适配，解决不同屏幕的样式需求。</li>
<li><strong>JS 动态大小</strong>：处理 CSS 无法实现的复杂动态逻辑，增强灵活性。</li>
</ul>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>前端</category>
        <category>布局</category>
      </categories>
      <tags>
        <tag>前端布局</tag>
      </tags>
  </entry>
  <entry>
    <title>动态高度大小的调整</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%B8%83%E5%B1%80/%E5%8A%A8%E6%80%81%E9%AB%98%E5%BA%A6%E7%9A%84%E5%A4%A7%E5%B0%8F%E8%B0%83%E6%95%B4/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 在页面上展示计算后的窗口高度 --&gt;</span><br><span class="line">    &lt;p&gt;当前窗口高度: &#123;&#123; adjustedWindowHeight &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">/*</span><br><span class="line">  引入 Vue 的组合式 API：</span><br><span class="line">  - ref: 定义响应式变量</span><br><span class="line">  - onMounted: 组件挂载后执行回调</span><br><span class="line">  - onBeforeUnmount: 组件卸载前执行回调</span><br><span class="line">  - computed: 定义计算属性</span><br><span class="line">*/</span><br><span class="line">import &#123; ref, onMounted, onBeforeUnmount, computed &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 定义一个响应式变量 originalWindowHeight，初始值是当前窗口高度</span><br><span class="line">const originalWindowHeight = ref(window.innerHeight);</span><br><span class="line"></span><br><span class="line">// 定义一个函数，用于在窗口大小改变时更新窗口高度</span><br><span class="line">const handleResize = () =&gt; &#123;</span><br><span class="line">  originalWindowHeight.value = window.innerHeight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 在组件挂载完成后，给 window 添加 resize 事件监听器</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  window.addEventListener(&#x27;resize&#x27;, handleResize);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 在组件卸载前，移除监听器，避免内存泄漏</span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">  window.removeEventListener(&#x27;resize&#x27;, handleResize);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 定义一个计算属性：在 originalWindowHeight 的基础上减去 380</span><br><span class="line">// 注意：这个 380 可能是为了预留固定区域的高度（比如底部导航栏、头部工具栏等）</span><br><span class="line">const adjustedWindowHeight = computed(() =&gt; &#123;</span><br><span class="line">  return originalWindowHeight.value - 380;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>前端</category>
        <category>布局</category>
      </categories>
      <tags>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu下安装mysql</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql/ubuntu%E4%B8%8Bmysql/</url>
    <content><![CDATA[<p>重新装的一个Ubuntu系统<br>先来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update </span><br></pre></td></tr></table></figure>

<p>然后安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server-8.0 </span><br></pre></td></tr></table></figure>

<p>查看是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure>

<p>查看服务状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status mysql </span><br></pre></td></tr></table></figure>

<p>然后在MySQL中修改以管理员身份启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql</span><br></pre></td></tr></table></figure>

<p>查看user</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select host,user from user;</span><br></pre></td></tr></table></figure>

<p>更新一下添加一个用户，host&#x3D;’%’为任意ip可连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure>

<p>改密码为123456</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<p>刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>检查防火墙状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<p>允许开发端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 3306</span><br></pre></td></tr></table></figure>



<p><code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> ，将 <code>bind-address</code> 设置为虚拟机的IP地址或者设置为 <code>0.0.0.0</code> 以允许所有地址连接。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p>需要vim基础，i进入编辑，esx退出，：wq保存</p>
<p>记得重启一下mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>

<p>使用下面这个命令来查看ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip addr show</span><br></pre></td></tr></table></figure>

<p>测试能否连通</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -h 192.168.183.130 -p</span><br><span class="line">//root：用户名  192.168.183.130：本机ip</span><br></pre></td></tr></table></figure>

<p>后面在登录就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-plus的使用</title>
    <url>/2025/04/21/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SprinBoot/mybatis-plus%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>mp可以帮助我们快速完成项目的curd。</p>
<h2 id="1、首先在配置中完成引用"><a href="#1、首先在配置中完成引用" class="headerlink" title="1、首先在配置中完成引用"></a>1、首先在配置中完成引用</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250419151410165.png" alt="image-20250419151410087"></p>
<p>在pom文件中添加如下依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.5&lt;/version&gt; &lt;!-- 这里写你想用的版本 --&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>重新加载后即可，这里的话mybatisplus包含mybatis，可以只安装一个就行了。两个都安装也没啥。最好还是一个吧。</p>
<h2 id="2、具体在项目中引用操作如下"><a href="#2、具体在项目中引用操作如下" class="headerlink" title="2、具体在项目中引用操作如下"></a>2、具体在项目中引用操作如下</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250419151257396.png" alt="QQ截图20250419144911"></p>
<h3 id="（1）创建一个pojo和数据库表对接"><a href="#（1）创建一个pojo和数据库表对接" class="headerlink" title="（1）创建一个pojo和数据库表对接"></a>（1）创建一个pojo和数据库表对接</h3><p>pojo下面创建一个实体类对应数据库表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.mybatis.pojo;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Integer grade;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(Integer age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getGrade() &#123;</span><br><span class="line">        return grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGrade(Integer grade) &#123;</span><br><span class="line">        this.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, grade=&quot; + grade +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="（2）创建mapper"><a href="#（2）创建mapper" class="headerlink" title="（2）创建mapper"></a>（2）创建mapper</h3><p>继承BaseMapper</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.mybatis.dao;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.example.mybatis.pojo.Student;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface StudentMapper extends BaseMapper&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（3）创建service"><a href="#（3）创建service" class="headerlink" title="（3）创建service"></a>（3）创建service</h3><p>继承IService</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.mybatis.service;</span><br><span class="line">import com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line">import org.example.mybatis.pojo.Student;</span><br><span class="line"></span><br><span class="line">public interface StudentService extends IService&lt;Student&gt; &#123;</span><br><span class="line">    // 你可以在这里加自定义方法，比如：</span><br><span class="line">    // Student findByPhone(String phone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（4）创建serviceImpl"><a href="#（4）创建serviceImpl" class="headerlink" title="（4）创建serviceImpl"></a>（4）创建serviceImpl</h3><p>继承ServiceImpl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.mybatis.service.impl;</span><br><span class="line"></span><br><span class="line">import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl; // 这个导入漏了</span><br><span class="line">import org.example.mybatis.dao.StudentMapper;</span><br><span class="line">import org.example.mybatis.pojo.Student; // 记得导入 Student 实体类</span><br><span class="line">import org.example.mybatis.service.StudentService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class StudentServiceImpl extends ServiceImpl&lt;StudentMapper, Student&gt; implements StudentService &#123;</span><br><span class="line">    // 这里可以加你自己的业务逻辑方法，比如：</span><br><span class="line">    // public Student findByPhone(String phone) &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="（5）在controller当中试一试"><a href="#（5）在controller当中试一试" class="headerlink" title="（5）在controller当中试一试"></a>（5）在controller当中试一试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example.mybatis.controller;</span><br><span class="line">import org.example.mybatis.pojo.Student;</span><br><span class="line">import org.example.mybatis.service.StudentService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class StudentController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private StudentService studentService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/findd&quot;)</span><br><span class="line">    public Student find(@RequestParam int id) &#123;</span><br><span class="line">        return studentService.getById(id);  // 调用 Service 的 getById() 方法来查找学生</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>后端</category>
        <category>SprinBoot</category>
      </categories>
      <tags>
        <tag>mybatisplus</tag>
      </tags>
  </entry>
  <entry>
    <title>burpsuit的三个核心功能</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Burpsuit/burpsuit%E7%9A%84%E4%B8%89%E4%B8%AA%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="1-拦截请求（Intercept）"><a href="#1-拦截请求（Intercept）" class="headerlink" title="1. 拦截请求（Intercept）"></a><strong>1. 拦截请求（Intercept）</strong></h3><ul>
<li><strong>功能：</strong> 允许你在请求发送到服务器之前，捕获并修改它。你可以查看并更改请求的所有部分（如 URL、请求头、请求体、参数等），然后再发送给服务器。</li>
<li><strong>应用场景：</strong><ul>
<li>修改提交的数据，比如修改表单字段，改变账号或密码。</li>
<li>绕过前端验证、模拟不同的用户行为等。</li>
</ul>
</li>
</ul>
<h3 id="2-代理（Proxy）"><a href="#2-代理（Proxy）" class="headerlink" title="2. 代理（Proxy）"></a><strong>2. 代理（Proxy）</strong></h3><ul>
<li><strong>功能：</strong> Burp Suite 充当一个中间代理服务器，拦截和转发客户端与服务器之间的所有请求和响应。你需要在浏览器或其他应用程序中配置代理，将流量引导到 Burp。</li>
<li><strong>应用场景：</strong><ul>
<li>监控和分析网站与服务器之间的所有通信。</li>
<li>在浏览器中使用 Burp 代理，你可以捕获所有 HTTP&#x2F;HTTPS 请求并进行修改或分析。</li>
<li>调试和优化 web 应用，分析请求和响应的内容。</li>
</ul>
</li>
</ul>
<h3 id="3-重发请求（Repeater）"><a href="#3-重发请求（Repeater）" class="headerlink" title="3. 重发请求（Repeater）"></a><strong>3. 重发请求（Repeater）</strong></h3><ul>
<li><strong>功能：</strong> 将捕获的请求发送到 <strong>Repeater</strong>，让你能够对请求进行细致的修改，然后反复提交请求。你可以手动修改请求的任何部分，并查看不同输入数据的响应。</li>
<li><strong>应用场景：</strong><ul>
<li>批量提交数据或者反复尝试不同参数的请求。</li>
<li>测试应用的安全性，如 SQL 注入、XSS 攻击等。</li>
<li>反复调整和测试 API 请求，直到得到预期的响应。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>网络安全</category>
        <category>Burpsuit</category>
      </categories>
      <tags>
        <tag>burpsuit</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot的结构解析</title>
    <url>/2025/04/21/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SprinBoot/springboot%E7%9A%84%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>三层架构</p>
<p>为什么要分，把每个业务交给专门的层来处理，便于后期的维护，需求的增删等</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250413170450306.png" alt="image-20250413170450206"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250413170954993.png" alt="image-20250413170954939"></p>
<h2 id="1、controller层"><a href="#1、controller层" class="headerlink" title="1、controller层"></a>1、controller层</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">仅仅只接收数据和传递数据，不做业务逻辑的处理，所有的controller都这样就三步。</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">    public Result&lt;String&gt; login(@RequestBody Map&lt;String, Object&gt; requestData) &#123;</span><br><span class="line">        // 1. 提取请求参数</span><br><span class="line">        String username = (String) requestData.get(&quot;username&quot;);</span><br><span class="line">        String password = (String) requestData.get(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">        // 2. 调用 Service 层处理登录逻辑</span><br><span class="line">        String token = userService.login(username, password);</span><br><span class="line"></span><br><span class="line">        // 3. 返回响应</span><br><span class="line">        if (token != null) &#123;</span><br><span class="line">            return Result.success(token);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return Result.error(&quot;Invalid username or password&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="2、service层"><a href="#2、service层" class="headerlink" title="2、service层"></a>2、service层</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">实现业务功能的一层，很重要的一层</span><br><span class="line">这里要先建立一个service对应的接口，在Impl下具体的实现方式。impl下是把每个功能单独拆开，前面写一个大函数将业务逻辑实现汇总。</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">@Service</span><br><span class="line">public class UserServiceImpl implements IUserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisService redisService;</span><br><span class="line"></span><br><span class="line">    // 大函数 1：实现登录功能</span><br><span class="line">    @Override</span><br><span class="line">    public String login(String username, String password) &#123;</span><br><span class="line">        // 协调各个子功能</span><br><span class="line">        String encryptedPassword = encryptPassword(password); // 小函数 1：加密密码</span><br><span class="line">        User user = validateUser(username, encryptedPassword); // 小函数 2：验证用户</span><br><span class="line">        if (user == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return getOrGenerateToken(user); // 小函数 3：获取或生成 token</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 小函数 1：加密密码</span><br><span class="line">    private String encryptPassword(String password) &#123;</span><br><span class="line">        return Md5Util.getMD5String(password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 小函数 2：获取或生成 token</span><br><span class="line">    private String getOrGenerateToken(User user) &#123;</span><br><span class="line">        String username = user.getUsername();</span><br><span class="line">        String token = getTokenFromRedis(username); // 小函数 3.1</span><br><span class="line">        if (token != null) &#123;</span><br><span class="line">            return token;</span><br><span class="line">        &#125;</span><br><span class="line">        return generateAndStoreToken(user); // 小函数 3.2</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    。。。。。。。。。。。</span><br></pre></td></tr></table></figure>



<h2 id="3、dao层"><a href="#3、dao层" class="headerlink" title="3、dao层"></a>3、dao层</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">就是与数据库之间进行curd操作，也是mapper层。一个sql语言，一个函数处理</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">@Mapper</span><br><span class="line">public interface LoginMapper &#123;</span><br><span class="line"></span><br><span class="line">    @Select(&quot;SELECT id FROM login WHERE username = #&#123;username&#125; AND password = #&#123;password&#125; LIMIT 1&quot;)</span><br><span class="line">    Integer exists(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from login where id = #&#123;id&#125;&quot;)</span><br><span class="line">    public Login findById(Integer id);</span><br><span class="line"></span><br><span class="line">    @Update(&quot;update login set password = #&#123;newPwd&#125; where id = #&#123;id&#125;&quot;)</span><br><span class="line">    void updataPwd(Integer id, String newPwd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="4、entity实体类"><a href="#4、entity实体类" class="headerlink" title="4、entity实体类"></a>4、entity实体类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个没什么好说的了，就是一些数据的类。对应数据库当中的表的字段，一一对应的嘛这个是pojo。这里注意一下和DOT的区分。POJO是映射数据库表结构，字段与表列一一对应（比如 User 类的 id、username、password、createdAt、updatedAt）。可能包含敏感字段（比如 password），不适合直接返回给前端。DTO：根据接口需求定义字段（比如 LoginResponseDTO 只包含 username 和 id）。适合返回给前端，不包含敏感字段。</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">public class Login &#123;</span><br><span class="line">    private Integer id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUsername() &#123;</span><br><span class="line">        return username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUsername(String username) &#123;</span><br><span class="line">        this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    。。。。。。。。。。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>后端</category>
        <category>SprinBoot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>burp学习</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Burpsuit/burp%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>burp使用时，有时候已经配置好的浏览器会加载不出来，这时候只需要在burp的代理中打开这个按钮就行了，但是拦截请求时会有点问题，拦截的时候可以关一下</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250611211144843.png" alt="image-20250611211144720"></p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>网络安全</category>
        <category>Burpsuit</category>
      </categories>
      <tags>
        <tag>burpsuit</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置flask项目</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/Docker/docker%E9%85%8D%E7%BD%AEflask%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>对于flask项目的</p>
<p>创建一个 <code>.dockerignore</code> 文件，并在其中列出不需要复制的文件或目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__pycache__</span><br><span class="line">.git</span><br><span class="line">.idea</span><br><span class="line">*.pyc</span><br><span class="line">*.pyo</span><br><span class="line">*.pyd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建一个dockerfile文件，里面写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用 Python 官方的 Alpine Linux 镜像作为基础镜像</span><br><span class="line">FROM python:3.9-alpine</span><br><span class="line"></span><br><span class="line"># 设置工作目录</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># 复制当前目录下的所有文件到工作目录中</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># 安装 Flask 和其他依赖	--no-cache-dir不安装缓存的</span><br><span class="line">RUN pip install --no-cache-dir -r requirements.txt</span><br><span class="line"></span><br><span class="line"># 暴露端口（假设你的应用程序在端口 5000 上运行） 感觉没什么用，但写着吧</span><br><span class="line">EXPOSE 5000</span><br><span class="line"></span><br><span class="line"># 启动应用程序</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure>



<p>在当前文件下使用以下命令构建 Docker 镜像，myflaskapp是名称，后面的.不能省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t myflaskapp .</span><br></pre></td></tr></table></figure>

<p>这将会构建一个名为 <code>myflaskapp</code> 的 Docker 镜像。、</p>
<p>运行 Docker 容器：-d是后台运行，-p是端口映射，本机端口-docker端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000:5000 myflaskapp</span><br></pre></td></tr></table></figure>

<p>这将会在后台运行你的 Flask 应用程序，并将容器的 5000 端口映射到主机的 5000 端口。</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>docker内配置mysql</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/Docker/docker%E5%86%85mysql/</url>
    <content><![CDATA[<p>查看docker的版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v </span><br></pre></td></tr></table></figure>



<p>查看docker的所有镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images -a</span><br></pre></td></tr></table></figure>



<p>拉取一个mysql的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure>



<p>运行该docker </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name shebei -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br><span class="line"></span><br><span class="line">-p 是端口映射，本机3306端口映射docker对应的3306</span><br><span class="line"></span><br><span class="line">--name 是数据库的名称	</span><br><span class="line"></span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456		设置数据库的root密码</span><br><span class="line"></span><br><span class="line">-d mysql 进程后台运行</span><br></pre></td></tr></table></figure>



<p>想要什么镜像就去docker hub上找</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240615105812552.png" alt="image-20240615105812552"></p>
<p>复制命令在终端运行即可</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>docker配置vue项目</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/Docker/docker%E9%85%8D%E7%BD%AEvue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>1、文件结构</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240701173640999.png" alt="image-20240701173640999"></p>
<p>2、先打包为dist，在dist中创建nginx并配置</p>
<p><strong><img src="C:\Users\zxz\AppData\Roaming\Typora\typora-user-images\image-20240701173732994.png" alt="image-20240701173732994"></strong></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240701173752121.png" alt="image-20240701173752121"></p>
<p>3、在外层docker中配置</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240701173820991.png" alt="image-20240701173820991"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240701173834925.png" alt="image-20240701173834925"></p>
<p>4、配置好了，运行docker的两个步骤</p>
<p>在当前文件下使用以下命令构建 Docker 镜像，myvue是名称，后面的.不能省略。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t myvue .</span><br></pre></td></tr></table></figure>

<p>这将会构建一个名为 <code>myflaskapp</code> 的 Docker 镜像。、</p>
<p>运行 Docker 容器：-d是后台运行，-p是端口映射，本机端口-docker端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000:5000 myvue</span><br></pre></td></tr></table></figure>

<p>这将会在后台运行你的 Flask 应用程序，并将容器的 5000 端口映射到主机的 5000 端口。</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透 FRP 使用教程</title>
    <url>/2025/10/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/Frp/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%20FRP%20%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>配置的话分为客户端和服务端，两边都需要配置好。</p>
<h2 id="1、最朴素模型：纯-TCP-直映射-一一对应"><a href="#1、最朴素模型：纯-TCP-直映射-一一对应" class="headerlink" title="1、最朴素模型：纯 TCP 直映射 &#x3D; 一一对应"></a>1、最朴素模型：纯 TCP 直映射 &#x3D; 一一对应</h2><p>这种方式“端口一一对应”是对的。缺点是：</p>
<ul>
<li>多个服务时服务器要开很多端口</li>
<li>用户访问要写端口号</li>
<li>不方便接入 HTTPS&#x2F;域名&#x2F;统一鉴权</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">外部用户  -&gt; 服务器IP:remote_port  -&gt; frps -&gt; frpc -&gt; 本地localhost:local_port</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 你的服务器IP</span><br><span class="line">server_port = 7000		#保持这个内网穿透服务跑建立 frpc→frps 的长连接，就是连接客户端和服务端</span><br><span class="line">token = change_me_token</span><br><span class="line"># 如需要，可开启控制连接 TLS（新版本选项）</span><br><span class="line"># tls_enable = true</span><br><span class="line"></span><br><span class="line"># 一对一映射：Vue 开发服务</span><br><span class="line">[vue_dev_tcp]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 6666</span><br><span class="line">remote_port = 16666     # 公网访问端口：服务器IP:16666</span><br><span class="line"></span><br><span class="line"># 一对一映射：SSH</span><br><span class="line">[ssh_tcp]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000      # 公网访问端口：服务器IP:6000</span><br></pre></td></tr></table></figure>





<h2 id="2、HTTP-HTTPS-场景"><a href="#2、HTTP-HTTPS-场景" class="headerlink" title="2、HTTP&#x2F;HTTPS 场景"></a>2、HTTP&#x2F;HTTPS 场景</h2><p>如果服务是http或者https的服务就用这种</p>
<p>因为http&#x2F;https这两个有些特殊，原因是基于Host头来的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">域名解析 → 入口端口接收 → 根据 Host 找对应隧道 → 走 frpc 转本地服务 → 回应原路返回。</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = your.server.ip.or.domain</span><br><span class="line">server_port = 7000</span><br><span class="line">token = change_me_token</span><br><span class="line"># 可选：tls_enable = true  (frp 0.5x+ 支持，控制连接加密)</span><br><span class="line"></span><br><span class="line"># Vue Dev (端口 6666)</span><br><span class="line">[vue_dev]</span><br><span class="line">type = http</span><br><span class="line">local_port = 6666</span><br><span class="line">custom_domains = dev.example.com</span><br><span class="line"></span><br><span class="line"># API 服务 (端口 7001)</span><br><span class="line">[api_service]</span><br><span class="line">type = http</span><br><span class="line">local_port = 7001</span><br><span class="line">custom_domains = api.example.com</span><br><span class="line"></span><br><span class="line"># 管理后台 (端口 5173)</span><br><span class="line">[admin_panel]</span><br><span class="line">type = http</span><br><span class="line">local_port = 5173</span><br><span class="line">custom_domains = admin.example.com</span><br><span class="line"></span><br><span class="line"># 如果你想用子域名模式，需要 frps.ini 中设置 subdomain_host</span><br><span class="line"># 例如：</span><br><span class="line"># [portal]</span><br><span class="line"># type = http</span><br><span class="line"># local_port = 8000</span><br><span class="line"># subdomain = portal   # 会变成 portal.your-subdomain-host</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>Frp</category>
      </categories>
      <tags>
        <tag>frp</tag>
        <tag>内网穿透</tag>
        <tag>服务器运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Github的ssh配置</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/Git/github%E7%9A%84ssh%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="第一步：检查本地主机是否已经存在ssh-key"><a href="#第一步：检查本地主机是否已经存在ssh-key" class="headerlink" title="第一步：检查本地主机是否已经存在ssh key"></a>第一步：检查本地主机是否已经存在ssh key</h2><p>在此之前得先输入git的账号密码啊.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name “zxz”</span><br><span class="line"></span><br><span class="line">git config --global user.email “zhongxiangzhuang123@gmail.com”</span><br></pre></td></tr></table></figure>

<p>还有得设置一下代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line"></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br><span class="line">//看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key</span><br></pre></td></tr></table></figure>

<p>如下图所示，则表明已经存在</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250806164433410.png" alt="在这里插入图片描述"></p>
<h2 id="第二步：生成ssh-key"><a href="#第二步：生成ssh-key" class="headerlink" title="第二步：生成ssh key"></a>第二步：生成ssh key</h2><p>如果不存在ssh key，使用如下命令生成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;</span><br><span class="line">//执行后一直回车即可    &quot;xxx@xxx.com&quot;起注释作用的，没其他意思</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-t rsa</code> 指定要生成的密钥类型为RSA。</li>
<li><code>-C &quot;your_email@example.com&quot;</code> 添加注释，一般是你的电子邮件地址，帮助你识别这个密钥对应的用途或所有者。</li>
</ul>
<ol>
<li><p>按下 Enter 键。</p>
</li>
<li><p>系统会提示你选择密钥文件的保存位置，默认是在用户目录下的 <code>.ssh</code> 文件夹中。</p>
</li>
<li><p>系统可能还会提示你设置一个密码来保护私钥，这是可选的，如果你想要额外的安全性可以设置密码，否则可以直接按 Enter 跳过。</p>
</li>
<li><p>终端会输出密钥生成的过程，包括公钥和私钥的生成以及保存路径等信息。</p>
</li>
<li><p>生成完成后，在你选择的保存位置中，你会找到生成的密钥文件，默认是<code>id_rsa</code>（私钥）和<code>id_rsa.pub</code>（公钥）。</p>
</li>
<li><p>你可以使用文本编辑器打开公钥文件（<code>id_rsa.pub</code>），将其中的内容复制到你想要连接的SSH服务器上，用于身份验证。私钥文件（<code>id_rsa</code>）则应该妥善保管在你的本地计算机上，不要泄露给其他人。</p>
</li>
</ol>
<h2 id="第三步：获取ssh-key公钥内容（id-rsa-pub）"><a href="#第三步：获取ssh-key公钥内容（id-rsa-pub）" class="headerlink" title="第三步：获取ssh key公钥内容（id_rsa.pub）"></a>第三步：获取ssh key公钥内容（id_rsa.pub）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>复制下面内容</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251018143159293.png" alt="image-20251018143159224"></p>
<h2 id="第四步：Github账号上添加公钥"><a href="#第四步：Github账号上添加公钥" class="headerlink" title="第四步：Github账号上添加公钥"></a>第四步：Github账号上添加公钥</h2><p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20251018143233085.png" alt="image-20251018143233006"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250806164433426.png" alt="image-20240426095944757"></p>
<h2 id="第五步：验证是否设置成功"><a href="#第五步：验证是否设置成功" class="headerlink" title="第五步：验证是否设置成功"></a>第五步：验证是否设置成功</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>得到Hi zxzlimit! You’ve successfully authenticated, but GitHub does not provide shell access.即为成功！</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>github配置</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh插件安装与配置</title>
    <url>/2025/10/18/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/Linux/zsh%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1、安装sh文件"><a href="#1、安装sh文件" class="headerlink" title="1、安装sh文件"></a>1、安装sh文件</h2><p>本地保存install.sh文件位于blog-code\other\res\install.sh，附件：<a style="color: #007bff;" href="/download/install_1.sh" download>install_1.sh</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh install_1.sh</span><br></pre></td></tr></table></figure>



<h2 id="2、安装插件"><a href="#2、安装插件" class="headerlink" title="2、安装插件"></a>2、安装插件</h2><p>执行install1.sh即可，文件位于blog-code\other\res\install1.sh，包含自动补全、语法高亮、命令历史提示。附件：<a style="color: #007bff;" href="/download/install_2.sh" download>install_2.sh</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh install_2.sh</span><br></pre></td></tr></table></figure>

<p>最后在重新加载一下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>zsh</tag>
        <tag>shell</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx Proxy Manager配置SSL</title>
    <url>/2025/03/02/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/NPM/Nginx-Proxy-Manager%E9%85%8D%E7%BD%AESSL/</url>
    <content><![CDATA[<p>这里有两种方式</p>
<p>~血的教训，记得打开443端口啊！！！这是https的端口，md在这里绕了好久啊！！！<br>还有配置好可能还是有问题，记得清除浏览器缓存或者换个浏览器打开试一试。</p>
<p>泛域名就是*.zxzflask.cn,其实按理说每一个域名下的子域名都应该单独配置一个ssl证书，但那样太麻烦了，于是就给一个域名配置好就行了，其他就是泛域名属于这个域名下的东西，只要给这个域名配置好了，后面的泛域名就一样了。例如dsada.zxzflask.cn ,adad.zxzflask.cn, 主域名就一个zxzflask.cn罢了。下面图片第一个就是属于泛域名。</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/qk0evn04.j1x.png" alt="qk0evn04.j1x"></p>
<h2 id="1、自己申请证书配置"><a href="#1、自己申请证书配置" class="headerlink" title="1、自己申请证书配置"></a>1、自己申请证书配置</h2><p>因为免费证书不支持泛域名。就只能一个一个申请了，不过申请也快的。例如文字a.zxzflask.cn。同时dns解析也要打开哈，必须的。</p>
<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/rjbbjyf0.vmj.png" alt="rjbbjyf0.vmj" style="zoom:33%;" /> 

<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/pxeivvto.dkc.png" alt="pxeivvto.dkc" style="zoom:33%;" /> 

<p>然后下载npm的证书文件，解压得到两个文件，一个后缀为.key:一个后缀为.pem的</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/yzz1mdy5.a1c.png" alt="yzz1mdy5.a1c"> </p>
<p>然后配置Nginx Proxy Manager，选择上传证书文件。</p>
 <img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/uql44sng.4hj.png" alt="uql44sng.4hj" style="zoom:33%;" />

<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/kxsex3ut.wnx.png" alt="kxsex3ut.wnx" style="zoom:33%;" /> 

<p>然后在proxy中选择这个就行了</p>
<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20250302095633072.png" alt="image-20250302095633072" style="zoom:33%;" /> 

<h2 id="2、使用dns申请证书配置"><a href="#2、使用dns申请证书配置" class="headerlink" title="2、使用dns申请证书配置"></a>2、使用dns申请证书配置</h2><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/hpb0zv5p.xgi.png" alt="hpb0zv5p.xgi" style="zoom:50%;" />

<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/guw5huto.sk1.png" alt="guw5huto.sk1"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/tjc0oilm.x4d.png" alt="tjc0oilm.x4d"></p>
<p>然后在Nginx Proxy Manager里面的主机配置好了就行了，也简单的。</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>Nginx Proxy Manager</tag>
      </tags>
  </entry>
  <entry>
    <title>NginxProxyManager的部署和使用教程</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/NPM/NginxProxyManager%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1、修改-Docker-配置（可选）"><a href="#1、修改-Docker-配置（可选）" class="headerlink" title="1、修改 Docker 配置（可选）"></a>1、修改 Docker 配置（可选）</h2><p>以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘（泪的教训）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">    &quot;log-opts&quot;: &#123;</span><br><span class="line">        &quot;max-size&quot;: &quot;20m&quot;,</span><br><span class="line">        &quot;max-file&quot;: &quot;3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ipv6&quot;: true,</span><br><span class="line">    &quot;fixed-cidr-v6&quot;: &quot;fd00:dead:beef:c0::/80&quot;,</span><br><span class="line">    &quot;experimental&quot;:true,</span><br><span class="line">    &quot;ip6tables&quot;:true</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>然后重启 Docker 服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>



<h2 id="2、要先安装Docker和Docker-Compose才方便安装nginx-proxy-manage"><a href="#2、要先安装Docker和Docker-Compose才方便安装nginx-proxy-manage" class="headerlink" title="2、要先安装Docker和Docker Compose才方便安装nginx-proxy-manage"></a>2、要先安装Docker和Docker Compose才方便安装<code>nginx-proxy-manage</code></h2><p>安装docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ./docker-desktop-amd64.deb</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<p>安装docker Compose</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>检查是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>





<p>3、查看端口是否被占用（以 81 为例），输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -i:81  #查看 81 端口是否被占用，如果被占用，重新自定义一个端口</span><br></pre></td></tr></table></figure>

<p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p>
<h2 id="4、然后创建文件写NGX的配置运行"><a href="#4、然后创建文件写NGX的配置运行" class="headerlink" title="4、然后创建文件写NGX的配置运行"></a>4、然后创建文件写NGX的配置运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line">mkdir -p /root/data/docker_data/npm</span><br><span class="line"></span><br><span class="line">cd /root/data/docker_data/npm</span><br></pre></td></tr></table></figure>

<p>编辑<code>docker-compose.yml</code>内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  app:</span><br><span class="line">    image: &#x27;jc21/nginx-proxy-manager:latest&#x27;</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - &#x27;80:80&#x27;  # 保持默认即可，不建议修改左侧的80</span><br><span class="line">      - &#x27;81:81&#x27;  # 冒号左边可以改成自己服务器未被占用的端口</span><br><span class="line">      - &#x27;443:443&#x27; # 保持默认即可，不建议修改左侧的443</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中</span><br><span class="line">      - ./letsencrypt:/etc/letsencrypt  # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 letsencrypt 文件夹中</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后运行该配置文件，这里的-d表示后台运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/data/docker_data/npm   # 来到 dockercompose 文件所在的文件夹</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>



<h2 id="5、nginx-proxy-manager控制台默认使用81端口，需要防火墙放行81端口，如果有安全组同样需要放行。"><a href="#5、nginx-proxy-manager控制台默认使用81端口，需要防火墙放行81端口，如果有安全组同样需要放行。" class="headerlink" title="5、nginx-proxy-manager控制台默认使用81端口，需要防火墙放行81端口，如果有安全组同样需要放行。"></a>5、<code>nginx-proxy-manager</code>控制台默认使用81端口，需要防火墙放行81端口，如果有安全组同样需要放行。</h2><p>浏览器输入地址：<code>http://ip:81</code>进入控制台。</p>
<p>默认管理员用户以及密码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure>

<img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/u43d4pb2.3zi.png" alt="u43d4pb2.3zi" style="zoom: 50%;" /> ]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>Nginx Proxy Manager</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx的基础指令</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/Nginx/nginx/</url>
    <content><![CDATA[<p>停止nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service nginx stop</span><br></pre></td></tr></table></figure>



<p>停止 Nginx 实例后，再次检查端口是否已被释放：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo netstat -tuln | grep &#x27;:80\|:443\|:888&#x27;</span><br></pre></td></tr></table></figure>



<p>重启 Nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service nginx start</span><br></pre></td></tr></table></figure>



<p>查找端口程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo lsof -i :80</span><br><span class="line">sudo lsof -i :443</span><br><span class="line">sudo lsof -i :888</span><br></pre></td></tr></table></figure>



<p>使用 <code>kill</code> 命令终止占用端口的进程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo kill -9 &lt;PID&gt;</span><br></pre></td></tr></table></figure>



<p>端口被释放后，重新启动 Nginx：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure>





<hr>
<p>Nginx 在 Linux 系统中一般安装在 <code>/etc/nginx</code> 目录下。主要的配置文件 <code>nginx.conf</code> 通常位于 <code>/etc/nginx/nginx.conf</code>。在这个目录下还会包含其他一些重要的配置文件和目录，如：</p>
<ul>
<li><code>/etc/nginx/conf.d/</code>：存放额外的配置文件，通常用于配置虚拟主机等。</li>
<li><code>/etc/nginx/sites-available/</code>：存放虚拟主机配置文件的模板或者可用配置。</li>
<li><code>/etc/nginx/sites-enabled/</code>：包含实际生效的虚拟主机配置文件的符号链接，通常指向 <code>sites-available</code> 中的配置文件。</li>
</ul>
<p>此外，Nginx 的日志文件通常位于 <code>/var/log/nginx/</code> 目录下，包括 <code>access.log</code>（访问日志）和 <code>error.log</code>（错误日志）等。</p>
<ol>
<li><p><strong>启动Nginx</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>停止Nginx</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>优雅地关闭Nginx</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s quit</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>重新加载Nginx配置</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>测试Nginx配置文件是否正确</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>检查Nginx版本</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<p>在宝塔面板下安装的 Nginx 的配置文件通常位于 <code>/www/server/panel/vhost/nginx</code> 目录中。在这个目录下，每个站点都有一个对应的配置文件，文件名通常以域名命名，如 <code>example.com.conf</code>。</p>
<p>你可以通过以下步骤找到宝塔面板下 Nginx 配置文件的位置：</p>
<ol>
<li>登录到宝塔面板。</li>
<li>在面板左侧菜单中，找到并点击 “网站” 选项。</li>
<li>在 “网站” 页面中，找到你想查看配置文件的网站，并点击网站名称。</li>
<li>在网站详情页面，点击 “设置” 选项卡。</li>
<li>在 “Nginx 配置” 部分，你可以看到 Nginx 配置文件的路径。点击 “配置文件” 按钮即可查看或编辑该配置文件。</li>
</ol>
<hr>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240527200453950.png" alt="image-20240527200453950"></p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx和uwsgi的配置</title>
    <url>/2025/08/05/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7/Nginx/nginx%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8Cuwsgi%E7%9A%84%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="uwsgi"><a href="#uwsgi" class="headerlink" title="uwsgi"></a>uwsgi</h2><p>uwsgi是一种协议</p>
<p>python的web框架基本上都要用，为什么，优化性能什么的嘛</p>
<p>安装</p>
<p>pip install uwsgi</p>
<p>在项目下创建一个ini文件，就uwsgi.ini,在里面写配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socket和http只能配一个</span><br><span class="line">和nginx整合用socket</span><br><span class="line"></span><br><span class="line">chdir项目目录</span><br><span class="line"></span><br><span class="line">wsgi-file 启动文件</span><br><span class="line"></span><br><span class="line">最后#必须去掉</span><br></pre></td></tr></table></figure>

<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250826102612830.png" alt="image-20240615172207562"></p>
<p>把项目搞到当前环境</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250826102612762.png" alt="image-20240615172346869"></p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250826102613792.png" alt="image-20240615172757631"></p>
<p>需要虚拟环境的文件requirements.txt也叫依赖</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250826102612747.png" alt="image-20240616151140842"></p>
<p>装依赖</p>
<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/20250826102613741.png" alt="image-20240616152102502"></p>
<h2 id="nginx和uwsgi"><a href="#nginx和uwsgi" class="headerlink" title="nginx和uwsgi"></a>nginx和uwsgi</h2><ul>
<li>1、<strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li>
<li>2、<strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>
<li>3、<strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。<ul>
<li>4、<strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li>
<li>5、<strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="line">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>简单示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name example.com www.example.com;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>推荐配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name example.com www.example.com;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>flask项目的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream django &#123;</span><br><span class="line">    server 127.0.0.1:8001; #具体端口必须与您uWSGI配置文件中定义的端口一致</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80; #设置的nginx访问端口</span><br><span class="line">    server_name  test;</span><br><span class="line">    charset      utf-8;</span><br><span class="line">    location /static &#123;</span><br><span class="line">        autoindex on;</span><br><span class="line">        alias /home/myblog/uwsgi_project/static; #具体目录以您现场具体部署的目录为准</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8001;</span><br><span class="line">        include uwsgi_params; #具体目录以您现场具体部署的目录为准</span><br><span class="line">        include /etc/nginx/uwsgi_params; #具体目录以您现场具体部署的目录为准</span><br><span class="line">        uwsgi_param UWSGI_SCRIPT iCourse.wsgi; #具体目录以您现场具体部署的目录为准</span><br><span class="line">        uwsgi_param UWSGI_CHDIR /iCourse; #具体目录以您现场具体部署的目录为准</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        client_max_body_size 35m;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://zxztypora.oss-cn-hangzhou.aliyuncs.com/image-20240701164254178.png" alt="image-20240701164254178"></p>
<p>简单说一下uwsgi的配置</p>
<p>1、新建uWSGI配置文件<code>uwsgi_config.ini</code>。</p>
<p>2、编辑文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket = 127.0.0.1:8001		此处的8001端口需要和nginx配置文件中定义的uwsgi_pass端口一致。</span><br><span class="line">chdir = /home/myblog/uwsgi_project/		指定项目目录，本示例中为/home/myblog/uwsgi_project，根据项目修改。</span><br><span class="line">wsgi-file = uwsgi_project/wsgi.py		指定Django&#x27;s wsgi file启动文件，根据项目修改</span><br><span class="line">processes = 4		最大工作进程。</span><br><span class="line">threads = 2		每个工作进程processes启动后开启的线程个数。</span><br><span class="line">vacuum = true		环境退出时自动清理。</span><br><span class="line">buffer-size = 65536		设置用于uwsgi包解析的内部缓存区大小为64k，默认是4k。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程学习</category>
        <category>运维工具</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>flask的数据迁移</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/Flask/flask%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>flask db init   创建</p>
<p>flask db migrate	迁移到数据库</p>
<p>flask db upgrade	数据更新一下</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>后端</category>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>falsk</tag>
      </tags>
  </entry>
  <entry>
    <title>flask传数据给前端</title>
    <url>/2025/02/17/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/Flask/%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E5%A4%B4%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>后端flask想传递一个数据给前端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@blue.route(&#x27;/download&#x27;, methods=[&#x27;POST&#x27;])</span><br><span class="line">def download_file():</span><br><span class="line">    # 文件路径</span><br><span class="line">    data = request.get_json()</span><br><span class="line">    zbh = data.get(&#x27;id&#x27;)  # 确保前端发送的 JSON 键为 &#x27;xuhao&#x27;</span><br><span class="line"></span><br><span class="line">    row = shebei.query.filter_by(id=zbh).first()</span><br><span class="line"></span><br><span class="line">    file_path = os.path.join(blue.root_path, f&#x27;../shebei/&#123;row.zbh&#125;/&#123;row.zbh&#125;.docx&#x27;)</span><br><span class="line">    </span><br><span class="line">    print(file_path)</span><br><span class="line"></span><br><span class="line">    # 检查文件是否存在</span><br><span class="line">    if os.path.exists(file_path):</span><br><span class="line">        # 发送文件</span><br><span class="line">        print(&quot;存在&quot;)</span><br><span class="line">        response = make_response(send_file(file_path, as_attachment=True))</span><br><span class="line">        response.headers[&#x27;h&#x27;] = row.zbh</span><br><span class="line">        return response</span><br><span class="line">    else:</span><br><span class="line">        return &quot;File not found&quot;, 404  # 返回 404 错误码表示文件未找到</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">row.zbh为想要传递的数据</span><br></pre></td></tr></table></figure>

<p>此外还要暴露这个头才行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 主程序的</span><br><span class="line">from APP import create_app</span><br><span class="line">from flask_cors import CORS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = create_app()</span><br><span class="line">CORS(app,expose_headers=[&quot;h&quot;])</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(debug=True, port=5000, host=&#x27;0.0.0.0&#x27;)</span><br></pre></td></tr></table></figure>





<p>前端接收</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const	download	=	async	()	=&gt;	&#123;</span><br><span class="line">	try	&#123;</span><br><span class="line">			axios.post(&#x27;http://127.0.0.1:5000/download&#x27;,	&#123;&#x27;id&#x27;:data.value&#125;,	&#123;	responseType:	&#x27;blob&#x27;	&#125;)</span><br><span class="line">							.then(response	=&gt;	&#123;</span><br><span class="line">								//通过头传递参数</span><br><span class="line">								console.log(&#x27;Custom	Message:&#x27;,	response.headers.get(&#x27;h&#x27;));</span><br><span class="line">								const	h	=	response.headers.get(&#x27;h&#x27;)</span><br><span class="line">								//	创建一个	URL	对象</span><br><span class="line">								const	imageUrl	=	URL.createObjectURL(new	Blob([response.data]));</span><br><span class="line">								//	创建一个	&lt;a&gt;	标签并设置下载属性</span><br><span class="line">								const	link	=	document.createElement(&#x27;a&#x27;);</span><br><span class="line">								link.href	=	imageUrl;</span><br><span class="line">								link.download	=	`$&#123;h&#125;.docx`;	//	下载文件的名称</span><br><span class="line">								//	模拟点击下载</span><br><span class="line">								link.click();</span><br><span class="line">								//	释放	URL	对象</span><br><span class="line">								URL.revokeObjectURL(imageUrl);</span><br><span class="line">							&#125;)</span><br><span class="line">							.catch(()	=&gt;	&#123;</span><br><span class="line">								const	open3	=	()	=&gt;	&#123;</span><br><span class="line">									ElMessage(&#123;</span><br><span class="line">										message:	&#x27;后台无数据&#x27;,</span><br><span class="line">										type:	&#x27;warning&#x27;,</span><br><span class="line">									&#125;)</span><br><span class="line">								&#125;</span><br><span class="line">								open3()</span><br><span class="line">							&#125;);</span><br><span class="line">	&#125;	catch	(error)	&#123;</span><br><span class="line">	//	捕获异常，显示错误消息</span><br><span class="line">	new	proxy.$tips(&#x27;服务器发生错误&#x27;,	&#x27;error&#x27;).mess_age();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>有弊端的，我不能传递汉字，不然会出错。</p>
]]></content>
      <categories>
        <category>编程学习</category>
        <category>后端</category>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
</search>
